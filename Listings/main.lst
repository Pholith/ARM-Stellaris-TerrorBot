


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK 12/2012 - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ;; Les deux LEDs sont initialement allumées
    3 00000000         ;; Ce programme lis l'état du bouton poussoir 1 connecté
                       e au port GPIOD broche 6
    4 00000000         ;; Si bouton poussoir fermé ==> fait clignoter les deux 
                       LED1&2 connectée au port GPIOF broches 4&5.
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         
   12 00000000         
   13 00000000         ; The GPIODATA register is the data register
   14 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   15 00000000         
   16 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E
   17 00000000         
   18 00000000         ; configure the corresponding pin to be an output
   19 00000000         ; all GPIO pins are inputs by default
   20 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   21 00000000         
   22 00000000         
   23 00000000         ; Digital enable register
   24 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   25 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   26 00000000         
   27 00000000         ; Pul_up
   28 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   29 00000000         
   30 00000000 00000003 
                       BUMPER  EQU              0x03        ; 000000011, Bumper
                                                             1 & 2



ARM Macro Assembler    Page 2 


   31 00000000         
   32 00000000         ; blinking frequency
   33 00000000 001FFFFF 
                       LED_BLINK_FREQ
                               EQU              0x001FFFFF
   34 00000000         
   35 00000000         
   36 00000000         
   37 00000000         
   38 00000000                 ENTRY
   39 00000000                 EXPORT           __main
   40 00000000         
   41 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   42 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   43 00000000                 IMPORT           MOTEUR_SET_SPEED_R0
   44 00000000         
   45 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   46 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   47 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   48 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   49 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   50 00000000         
   51 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   52 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   53 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   54 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   55 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   56 00000000         
   57 00000000         
   58 00000000                 IMPORT           LEDS_INIT
   59 00000000                 IMPORT           LEDS_FORWARD_ON
   60 00000000                 IMPORT           LEDS_BACKWARD_ON
   61 00000000                 IMPORT           LEDS_BACKWARD_INVERSE
   62 00000000                 IMPORT           LEDS_ON
   63 00000000                 IMPORT           LEDS_OFF
   64 00000000         
   65 00000000                 IMPORT           WAIT_R8
   66 00000000         
   67 00000000         ; Register usage : 
   68 00000000         ; r0: 



ARM Macro Assembler    Page 3 


   69 00000000         ; r1: 
   70 00000000         ; r2: timer calc
   71 00000000         ; r3: 
   72 00000000         ; r4: Bumper 1
   73 00000000         ; r5: Leds address
   74 00000000         ; r6: Engines address
   75 00000000         ; r7: 
   76 00000000         ; r8: Used by Timers.s
   77 00000000         ; r9: Time calculation
   78 00000000         
   79 00000000         
   80 00000000         __main
   81 00000000         
   82 00000000         ; ;; Enable the Port F & D & E peripheral clock   (p291 
                       datasheet de lm3s9B96.pdf)
   83 00000000         ; ;;         
   84 00000000 4933            ldr              r1, = SYSCTL_PERIPH_GPIO 
                                                            ;; RCGC2
   85 00000002         ; ;;mov r0, #0x00000028       ;; Enable clock sur GPIO D
                        et F où sont branchés les leds (0x28 == 0b101000)
   86 00000002 F04F 0038       mov              r0, #0x00000038 ;; Enable clock
                                                             sur GPIO D et F où
                                                             sont branchés les 
                                                            leds (0x28 == 0b111
                                                            000)
   87 00000006         ; ;;                              (GPIO::FEDCBA)
   88 00000006 6008            str              r0, [r1]
   89 00000008         
   90 00000008         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   91 00000008 BF00            nop                          ;; tres tres import
                                                            ant....
   92 0000000A BF00            nop
   93 0000000C BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   94 0000000E         
   95 0000000E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATIONS SOUS PROGR
                       AMME
   96 0000000E         
   97 0000000E F7FF FFFE       BL               MOTEUR_INIT
   98 00000012 F240 1099       mov              r0, #0x199
   99 00000016 F7FF FFFE       BL               MOTEUR_SET_SPEED_R0
  100 0000001A         
  101 0000001A F7FF FFFE       BL               LEDS_INIT
  102 0000001E         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration
  103 0000001E         
  104 0000001E         
  105 0000001E         
  106 0000001E         
  107 0000001E         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1
  108 0000001E         
  109 0000001E 492D            ldr              r1, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  110 00000020 F04F 0003       ldr              r0, = BUMPER
  111 00000024 6008            str              r0, [r1]
  112 00000026         
  113 00000026 492C            ldr              r1, = GPIO_PORTE_BASE+GPIO_O_DE



ARM Macro Assembler    Page 4 


N 
                                                            ;; Enable Digital F
                                                            unction 
  114 00000028 F04F 0003       ldr              r0, = BUMPER
  115 0000002C 6008            str              r0, [r1]
  116 0000002E         
  117 0000002E 4C2B            ldr              r4, = GPIO_PORTE_BASE + (BUMPER
<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  118 00000030         
  119 00000030         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher 
  120 00000030         
  121 00000030         
  122 00000030         
  123 00000030         ;;PART 1 : Starting 
  124 00000030         
  125 00000030 F7FF FFFE       BL               LEDS_FORWARD_ON
  126 00000034         
  127 00000034 F7FF FFFE       BL               MOTEUR_DROIT_ON
  128 00000038 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  129 0000003C         
  130 0000003C F7FF FFFE       BL               MOTEUR_DROIT_INVERSE
  131 00000040 F7FF FFFE       BL               MOTEUR_GAUCHE_INVERSE
  132 00000044         
  133 00000044 F04F 0900       mov              r9, #0x00   ;reset timer
  134 00000048         
  135 00000048         ReadState
  136 00000048         
  137 00000048         
  138 00000048         ;;PART 2 : Waiting for bumper impact. 
  139 00000048         
  140 00000048 F109 0903       add              r9, #3      ; add 3 operation t
                                                            ime elapsed
  141 0000004C         
  142 0000004C F8D4 A000       ldr              r10,[r4]
  143 00000050 F1BA 0F03       CMP              r10,#0x03
  144 00000054 D0F8            BEQ              ReadState   ;// if (current bum
                                                            per value == no bum
                                                            per are colliding) 
                                                            goto ReadState;
  145 00000056         
  146 00000056         
  147 00000056         ;;PART 3 : Come back to orginnal position
  148 00000056         
  149 00000056 F7FF FFFE       BL               LEDS_OFF
  150 0000005A F7FF FFFE       BL               MOTEUR_DROIT_OFF
  151 0000005E F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  152 00000062         
  153 00000062         ;;Wait a bit
  154 00000062 F8DF 807C       ldr              r8, = 0x002FFFFF
  155 00000066 F7FF FFFE       BL               WAIT_R8
  156 0000006A         
  157 0000006A         ;;Go back
  158 0000006A         
  159 0000006A F7FF FFFE       BL               LEDS_BACKWARD_ON
  160 0000006E F7FF FFFE       BL               MOTEUR_DROIT_ON
  161 00000072 F7FF FFFE       BL               MOTEUR_GAUCHE_ON



ARM Macro Assembler    Page 5 


  162 00000076 F7FF FFFE       BL               MOTEUR_DROIT_INVERSE
  163 0000007A F7FF FFFE       BL               MOTEUR_GAUCHE_INVERSE
  164 0000007E         
  165 0000007E         ;;Wait until the bot is back to original position and bl
                       ink leds
  166 0000007E         
  167 0000007E F7FF FFFE       BL               LEDS_BACKWARD_ON
  168 00000082         
  169 00000082         
  170 00000082         ; Pour faire clignoter les leds
  171 00000082         ;mov r7, r9
  172 00000082         ;loopBack
  173 00000082         ;SUB r7, #0x1FFFFF
  174 00000082         ;BL LEDS_BACKWARD_INVERSE
  175 00000082         ;ldr r8, =LED_BLINK_FREQ
  176 00000082         ;BL WAIT_R8
  177 00000082         ;CMP r7, #0
  178 00000082         ;BPL loopBack
  179 00000082         
  180 00000082         
  181 00000082 46C8            mov              r8, r9
  182 00000084 F7FF FFFE       BL               WAIT_R8
  183 00000088         
  184 00000088         
  185 00000088         ;;PART 4 : RUN
  186 00000088         
  187 00000088 F7FF FFFE       BL               LEDS_OFF
  188 0000008C F7FF FFFE       BL               MOTEUR_DROIT_OFF
  189 00000090 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  190 00000094         
  191 00000094         ;;Wait a bit
  192 00000094 F8DF 804C       ldr              r8, = 0x003FFFFF
  193 00000098 F7FF FFFE       BL               WAIT_R8
  194 0000009C         
  195 0000009C         
  196 0000009C         
  197 0000009C         ;;RUN
  198 0000009C         
  199 0000009C F7FF FFFE       BL               LEDS_FORWARD_ON
  200 000000A0 F7FF FFFE       BL               MOTEUR_DROIT_ON
  201 000000A4 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  202 000000A8 F7FF FFFE       BL               MOTEUR_DROIT_INVERSE
  203 000000AC F7FF FFFE       BL               MOTEUR_GAUCHE_INVERSE
  204 000000B0         
  205 000000B0 F04F 00D0       mov              r0, #0x0D0  ;set the speed 
  206 000000B4 F7FF FFFE       BL               MOTEUR_SET_SPEED_R0
  207 000000B8         
  208 000000B8 EA4F 08A9       ASR              r8, r9, #0x02 ; divide the dist
                                                            ance by 2
  209 000000BC F7FF FFFE       BL               WAIT_R8
  210 000000C0         
  211 000000C0         
  212 000000C0         
  213 000000C0 F7FF FFFE       BL               LEDS_OFF
  214 000000C4 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  215 000000C8 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  216 000000CC         
  217 000000CC BF00            nop
  218 000000CE                 END



ARM Macro Assembler    Page 6 


              00 00 400FE108 
              40024510 
              4002451C 
              4002400C 
              002FFFFF 
              003FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Users\v
ince\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\vinc
e\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM3\Include --predefine
="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION
 SETA 532" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --predefine="
_RTE_ SETA 1" --list=.\listings\main.lst Main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file Main.s
   Uses
      None
Comment: .text unused
ReadState 00000048

Symbol: ReadState
   Definitions
      At line 135 in file Main.s
   Uses
      At line 144 in file Main.s
Comment: ReadState used once
__main 00000000

Symbol: __main
   Definitions
      At line 80 in file Main.s
   Uses
      At line 39 in file Main.s
Comment: __main used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BUMPER 00000003

Symbol: BUMPER
   Definitions
      At line 30 in file Main.s
   Uses
      At line 110 in file Main.s
      At line 114 in file Main.s
      At line 117 in file Main.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 28 in file Main.s
   Uses
      At line 109 in file Main.s
Comment: GPIO_I_PUR used once
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 25 in file Main.s
   Uses
      At line 113 in file Main.s
Comment: GPIO_O_DEN used once
GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 20 in file Main.s
   Uses
      None
Comment: GPIO_O_DIR unused
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 14 in file Main.s
   Uses
      None
Comment: GPIO_PORTD_BASE unused
GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 16 in file Main.s
   Uses
      At line 109 in file Main.s
      At line 113 in file Main.s
      At line 117 in file Main.s

LED_BLINK_FREQ 001FFFFF

Symbol: LED_BLINK_FREQ
   Definitions
      At line 33 in file Main.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: LED_BLINK_FREQ unused
SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file Main.s
   Uses
      At line 84 in file Main.s
Comment: SYSCTL_PERIPH_GPIO used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

LEDS_BACKWARD_INVERSE 00000000

Symbol: LEDS_BACKWARD_INVERSE
   Definitions
      At line 61 in file Main.s
   Uses
      None
Comment: LEDS_BACKWARD_INVERSE unused
LEDS_BACKWARD_ON 00000000

Symbol: LEDS_BACKWARD_ON
   Definitions
      At line 60 in file Main.s
   Uses
      At line 159 in file Main.s
      At line 167 in file Main.s

LEDS_FORWARD_ON 00000000

Symbol: LEDS_FORWARD_ON
   Definitions
      At line 59 in file Main.s
   Uses
      At line 125 in file Main.s
      At line 199 in file Main.s

LEDS_INIT 00000000

Symbol: LEDS_INIT
   Definitions
      At line 58 in file Main.s
   Uses
      At line 101 in file Main.s
Comment: LEDS_INIT used once
LEDS_OFF 00000000

Symbol: LEDS_OFF
   Definitions
      At line 63 in file Main.s
   Uses
      At line 149 in file Main.s
      At line 187 in file Main.s
      At line 213 in file Main.s

LEDS_ON 00000000

Symbol: LEDS_ON
   Definitions
      At line 62 in file Main.s
   Uses
      None
Comment: LEDS_ON unused
MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 48 in file Main.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 47 in file Main.s
   Uses
      None
Comment: MOTEUR_DROIT_AVANT unused
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 49 in file Main.s
   Uses
      At line 130 in file Main.s
      At line 162 in file Main.s
      At line 202 in file Main.s

MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 46 in file Main.s
   Uses
      At line 150 in file Main.s
      At line 188 in file Main.s
      At line 214 in file Main.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 45 in file Main.s
   Uses
      At line 127 in file Main.s
      At line 160 in file Main.s
      At line 200 in file Main.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 54 in file Main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 53 in file Main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_AVANT unused
MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 55 in file Main.s
   Uses
      At line 131 in file Main.s
      At line 163 in file Main.s
      At line 203 in file Main.s

MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 52 in file Main.s
   Uses
      At line 151 in file Main.s
      At line 189 in file Main.s
      At line 215 in file Main.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 51 in file Main.s
   Uses
      At line 128 in file Main.s
      At line 161 in file Main.s
      At line 201 in file Main.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 42 in file Main.s
   Uses
      At line 97 in file Main.s
Comment: MOTEUR_INIT used once
MOTEUR_SET_SPEED_R0 00000000

Symbol: MOTEUR_SET_SPEED_R0
   Definitions
      At line 43 in file Main.s
   Uses
      At line 99 in file Main.s
      At line 206 in file Main.s

WAIT_R8 00000000

Symbol: WAIT_R8
   Definitions
      At line 65 in file Main.s
   Uses
      At line 155 in file Main.s
      At line 182 in file Main.s
      At line 193 in file Main.s
      At line 209 in file Main.s

19 symbols
367 symbols in table
