


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK 12/2012 - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ;; Les deux LEDs sont initialement allumées
    3 00000000         ;; Ce programme lis l'état du bouton poussoir 1 connecté
                       e au port GPIOD broche 6
    4 00000000         ;; Si bouton poussoir fermé ==> fait clignoter les deux 
                       LED1&2 connectée au port GPIOF broches 4&5.
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
    9 00000000 400FE108 
                       SYSCTL_PERIPH_GPIO
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   10 00000000         
   11 00000000         
   12 00000000         
   13 00000000         ; The GPIODATA register is the data register
   14 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E
   15 00000000         
   16 00000000         ; configure the corresponding pin to be an output
   17 00000000         
   18 00000000         ; Digital enable register
   19 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   20 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   21 00000000         
   22 00000000         ; Pul_up
   23 00000000 00000510 
                       GPIO_I_PUR
                               EQU              0x00000510  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   24 00000000         
   25 00000000 00000003 
                       BUMPER  EQU              0x03        ; 000000011, Bumper
                                                             1 & 2
   26 00000000         
   27 00000000         ; blinking frequency
   28 00000000 001FFFFF 
                       LED_BLINK_FREQ
                               EQU              0x001FFFFF
   29 00000000         
   30 00000000         
   31 00000000         
   32 00000000         
   33 00000000                 ENTRY
   34 00000000                 EXPORT           __main
   35 00000000         
   36 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.



ARM Macro Assembler    Page 2 


   37 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   38 00000000                 IMPORT           MOTEUR_SET_SPEED_R0
   39 00000000         
   40 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   41 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   42 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   43 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   44 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   45 00000000         
   46 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   47 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   48 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   49 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   50 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   51 00000000         
   52 00000000         
   53 00000000                 IMPORT           LEDS_INIT
   54 00000000                 IMPORT           LEDS_FORWARD_ON
   55 00000000                 IMPORT           LEDS_BACKWARD_ON
   56 00000000                 IMPORT           LEDS_BACKWARD_INVERT
   57 00000000                 IMPORT           LEDS_ON
   58 00000000                 IMPORT           LEDS_OFF
   59 00000000         
   60 00000000                 IMPORT           WAIT_R8
   61 00000000         
   62 00000000         ; Register usage : 
   63 00000000         ; r0: 
   64 00000000         ; r1: 
   65 00000000         ; r2: timer calc
   66 00000000         ; r3: 
   67 00000000         ; r4: Bumper 1
   68 00000000         ; r5: Leds address
   69 00000000         ; r6: Engines address
   70 00000000         ; r7: 
   71 00000000         ; r8: Used by Timers.s
   72 00000000         ; r9: Time calculation
   73 00000000         
   74 00000000         
   75 00000000         
   76 00000000         __main
   77 00000000         



ARM Macro Assembler    Page 3 


   78 00000000         ; ;; Enable the Port F & D & E peripheral clock   (p291 
                       datasheet de lm3s9B96.pdf)
   79 00000000         ; ;;         
   80 00000000         
   81 00000000         
   82 00000000         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   83 00000000 BF00            nop                          ;; tres tres import
                                                            ant....
   84 00000002 BF00            nop
   85 00000004 BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
   86 00000006         
   87 00000006         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATIONS SOUS PROGR
                       AMME
   88 00000006         
   89 00000006 F7FF FFFE       BL               MOTEUR_INIT
   90 0000000A F240 1099       mov              r0, #0x199
   91 0000000E F7FF FFFE       BL               MOTEUR_SET_SPEED_R0
   92 00000012         
   93 00000012 F7FF FFFE       BL               LEDS_INIT
   94 00000016         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration
   95 00000016         
   96 00000016         
   97 00000016         
   98 00000016         
   99 00000016         
  100 00000016         
  101 00000016         ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^CONFIGURATION Switcher 1
  102 00000016         
  103 00000016 4932            ldr              r1, = GPIO_PORTE_BASE+GPIO_I_PU
R 
                                                            ;; Pul_up 
  104 00000018 F04F 0003       ldr              r0, = BUMPER
  105 0000001C 6008            str              r0, [r1]
  106 0000001E         
  107 0000001E 4931            ldr              r1, = GPIO_PORTE_BASE+GPIO_O_DE
N 
                                                            ;; Enable Digital F
                                                            unction 
  108 00000020 F04F 0003       ldr              r0, = BUMPER
  109 00000024 6008            str              r0, [r1]
  110 00000026         
  111 00000026 4C30            ldr              r4, = GPIO_PORTE_BASE + (BUMPER
<<2) 
                                                            ;; @data Register =
                                                             @base + (mask<<2) 
                                                            ==> Switcher
  112 00000028         
  113 00000028         ;vvvvvvvvvvvvvvvvvvvvvvvFin configuration Switcher 
  114 00000028         
  115 00000028         
  116 00000028         
  117 00000028         
  118 00000028         
  119 00000028         
  120 00000028         
  121 00000028         



ARM Macro Assembler    Page 4 


  122 00000028         
  123 00000028         
  124 00000028         
  125 00000028         
  126 00000028         ;;PART 1 : Starting 
  127 00000028         
  128 00000028 F7FF FFFE       BL               LEDS_FORWARD_ON
  129 0000002C         
  130 0000002C F7FF FFFE       BL               MOTEUR_DROIT_ON
  131 00000030 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  132 00000034         
  133 00000034 F7FF FFFE       BL               MOTEUR_DROIT_INVERSE
  134 00000038 F7FF FFFE       BL               MOTEUR_GAUCHE_INVERSE
  135 0000003C         
  136 0000003C F04F 0900       mov              r9, #0x00   ;reset timer
  137 00000040         
  138 00000040         ReadState
  139 00000040         
  140 00000040         
  141 00000040         ;;PART 2 : Waiting for bumper impact. 
  142 00000040         
  143 00000040 F109 0903       add              r9, #3      ; add 3 operation t
                                                            ime elapsed
  144 00000044         
  145 00000044 F8D4 A000       ldr              r10,[r4]
  146 00000048 F1BA 0F03       CMP              r10,#0x03
  147 0000004C D0F8            BEQ              ReadState   ;// if (current bum
                                                            per value == no bum
                                                            per are colliding) 
                                                            goto ReadState;
  148 0000004E         
  149 0000004E         
  150 0000004E         ;;PART 3 : Come back to orginnal position
  151 0000004E         
  152 0000004E F7FF FFFE       BL               LEDS_OFF
  153 00000052 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  154 00000056 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  155 0000005A         
  156 0000005A         ;;Wait a bit
  157 0000005A F8DF 8090       ldr              r8, = 0x002FFFFF
  158 0000005E F7FF FFFE       BL               WAIT_R8
  159 00000062         
  160 00000062         ;;Go back
  161 00000062         
  162 00000062 F7FF FFFE       BL               LEDS_BACKWARD_ON
  163 00000066 F7FF FFFE       BL               MOTEUR_DROIT_ON
  164 0000006A F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  165 0000006E F7FF FFFE       BL               MOTEUR_DROIT_INVERSE
  166 00000072 F7FF FFFE       BL               MOTEUR_GAUCHE_INVERSE
  167 00000076         
  168 00000076         ;;Wait until the bot is back to original position and bl
                       ink leds
  169 00000076         
  170 00000076 F7FF FFFE       BL               LEDS_BACKWARD_ON
  171 0000007A 4649            mov              r1, r9      ; Store total time 
                                                            to wait into r0
  172 0000007C         
  173 0000007C         loop_moveBack
  174 0000007C F8DF 8070       ldr              r8, = LED_BLINK_FREQ



ARM Macro Assembler    Page 5 


  175 00000080 EBB1 0108       subs             r1, r8      ; totalTime -= blin
                                                            kTime 
  176 00000084 F7FF FFFE       BL               WAIT_R8     ; wait 1 blink 
  177 00000088         
  178 00000088 F7FF FFFE       BL               LEDS_BACKWARD_INVERT ; blink le
                                                            ds. (Modify R0)  
  179 0000008C F8DF 8060       ldr              r8, =LED_BLINK_FREQ
  180 00000090 4541            CMP              r1, r8
  181 00000092 DCF3            BGT              loop_moveBack ; if totalTime > 
                                                            blinkTime: goto loo
                                                            pBack
  182 00000094         
  183 00000094 4688            mov              r8, r1
  184 00000096 F7FF FFFE       BL               WAIT_R8     ; wait remaining ti
                                                            me
  185 0000009A         
  186 0000009A         
  187 0000009A         ;;PART 4 : RUN
  188 0000009A         
  189 0000009A F7FF FFFE       BL               LEDS_OFF
  190 0000009E F7FF FFFE       BL               MOTEUR_DROIT_OFF
  191 000000A2 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  192 000000A6         
  193 000000A6         ;;Wait a bit
  194 000000A6 F8DF 804C       ldr              r8, = 0x003FFFFF
  195 000000AA F7FF FFFE       BL               WAIT_R8
  196 000000AE         
  197 000000AE         
  198 000000AE         
  199 000000AE         ;;RUN
  200 000000AE         
  201 000000AE F7FF FFFE       BL               LEDS_FORWARD_ON
  202 000000B2 F7FF FFFE       BL               MOTEUR_DROIT_ON
  203 000000B6 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  204 000000BA F7FF FFFE       BL               MOTEUR_DROIT_INVERSE
  205 000000BE F7FF FFFE       BL               MOTEUR_GAUCHE_INVERSE
  206 000000C2         
  207 000000C2 F04F 00C8       mov              r0, #0x0C8  ;set the speed 
  208 000000C6 F7FF FFFE       BL               MOTEUR_SET_SPEED_R0
  209 000000CA         
  210 000000CA EA4F 08A9       ASR              r8, r9, #0x02 ; divide the dist
                                                            ance by 2
  211 000000CE F7FF FFFE       BL               WAIT_R8
  212 000000D2         
  213 000000D2         
  214 000000D2         
  215 000000D2 F7FF FFFE       BL               LEDS_OFF
  216 000000D6 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  217 000000DA F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  218 000000DE         
  219 000000DE BF00            nop
  220 000000E0                 END
              40024510 
              4002451C 
              4002400C 
              002FFFFF 
              001FFFFF 
              003FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw



ARM Macro Assembler    Page 6 


ork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Users\D
arkvanus\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\
Darkvanus\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM3\Include --p
redefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION
_VERSION SETA 533" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --pre
define="_RTE_ SETA 1" --list=.\listings\main.lst Main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file Main.s
   Uses
      None
Comment: .text unused
ReadState 00000040

Symbol: ReadState
   Definitions
      At line 138 in file Main.s
   Uses
      At line 147 in file Main.s
Comment: ReadState used once
__main 00000000

Symbol: __main
   Definitions
      At line 76 in file Main.s
   Uses
      At line 34 in file Main.s
Comment: __main used once
loop_moveBack 0000007C

Symbol: loop_moveBack
   Definitions
      At line 173 in file Main.s
   Uses
      At line 181 in file Main.s
Comment: loop_moveBack used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BUMPER 00000003

Symbol: BUMPER
   Definitions
      At line 25 in file Main.s
   Uses
      At line 104 in file Main.s
      At line 108 in file Main.s
      At line 111 in file Main.s

GPIO_I_PUR 00000510

Symbol: GPIO_I_PUR
   Definitions
      At line 23 in file Main.s
   Uses
      At line 103 in file Main.s
Comment: GPIO_I_PUR used once
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 20 in file Main.s
   Uses
      At line 107 in file Main.s
Comment: GPIO_O_DEN used once
GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 14 in file Main.s
   Uses
      At line 103 in file Main.s
      At line 107 in file Main.s
      At line 111 in file Main.s

LED_BLINK_FREQ 001FFFFF

Symbol: LED_BLINK_FREQ
   Definitions
      At line 28 in file Main.s
   Uses
      At line 174 in file Main.s
      At line 179 in file Main.s

SYSCTL_PERIPH_GPIO 400FE108

Symbol: SYSCTL_PERIPH_GPIO
   Definitions
      At line 9 in file Main.s
   Uses
      None
Comment: SYSCTL_PERIPH_GPIO unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

LEDS_BACKWARD_INVERT 00000000

Symbol: LEDS_BACKWARD_INVERT
   Definitions
      At line 56 in file Main.s
   Uses
      At line 178 in file Main.s
Comment: LEDS_BACKWARD_INVERT used once
LEDS_BACKWARD_ON 00000000

Symbol: LEDS_BACKWARD_ON
   Definitions
      At line 55 in file Main.s
   Uses
      At line 162 in file Main.s
      At line 170 in file Main.s

LEDS_FORWARD_ON 00000000

Symbol: LEDS_FORWARD_ON
   Definitions
      At line 54 in file Main.s
   Uses
      At line 128 in file Main.s
      At line 201 in file Main.s

LEDS_INIT 00000000

Symbol: LEDS_INIT
   Definitions
      At line 53 in file Main.s
   Uses
      At line 93 in file Main.s
Comment: LEDS_INIT used once
LEDS_OFF 00000000

Symbol: LEDS_OFF
   Definitions
      At line 58 in file Main.s
   Uses
      At line 152 in file Main.s
      At line 189 in file Main.s
      At line 215 in file Main.s

LEDS_ON 00000000

Symbol: LEDS_ON
   Definitions
      At line 57 in file Main.s
   Uses
      None
Comment: LEDS_ON unused
MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 43 in file Main.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 42 in file Main.s
   Uses
      None
Comment: MOTEUR_DROIT_AVANT unused
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 44 in file Main.s
   Uses
      At line 133 in file Main.s
      At line 165 in file Main.s
      At line 204 in file Main.s

MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 41 in file Main.s
   Uses
      At line 153 in file Main.s
      At line 190 in file Main.s
      At line 216 in file Main.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 40 in file Main.s
   Uses
      At line 130 in file Main.s
      At line 163 in file Main.s
      At line 202 in file Main.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 49 in file Main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 48 in file Main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_AVANT unused
MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 50 in file Main.s
   Uses
      At line 134 in file Main.s
      At line 166 in file Main.s
      At line 205 in file Main.s

MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 47 in file Main.s
   Uses
      At line 154 in file Main.s
      At line 191 in file Main.s
      At line 217 in file Main.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 46 in file Main.s
   Uses
      At line 131 in file Main.s
      At line 164 in file Main.s
      At line 203 in file Main.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 37 in file Main.s
   Uses
      At line 89 in file Main.s
Comment: MOTEUR_INIT used once
MOTEUR_SET_SPEED_R0 00000000

Symbol: MOTEUR_SET_SPEED_R0
   Definitions
      At line 38 in file Main.s
   Uses
      At line 91 in file Main.s
      At line 208 in file Main.s

WAIT_R8 00000000

Symbol: WAIT_R8
   Definitions
      At line 60 in file Main.s
   Uses
      At line 158 in file Main.s
      At line 176 in file Main.s
      At line 184 in file Main.s
      At line 195 in file Main.s
      At line 211 in file Main.s

19 symbols
366 symbols in table
