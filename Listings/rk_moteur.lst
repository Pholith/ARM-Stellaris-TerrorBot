


ARM Macro Assembler    Page 1 


    1 00000000         ; M. Akil, T. Grandpierre, R. Kachouri : département IT 
                       - ESIEE Paris -
    2 00000000         ; 01/2013 - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (configure les pwms + GPIO)
    4 00000000         
    5 00000000         ;Les pages se réfèrent au datasheet lm3s9b92.pdf
    6 00000000         
    7 00000000         ;Cablage :
    8 00000000         ;pin 10/PD0/PWM0 => input PWM du pont en H DRV8801RT
    9 00000000         ;pin 11/PD1/PWM1 => input Phase_R  du pont en H DRV8801R
                       T
   10 00000000         ;pin 12/PD2   => input SlowDecay commune aux 2 ponts en 
                       H
   11 00000000         ;pin 98/PD5   => input Enable 12v du conv DC/DC 
   12 00000000         ;pin 86/PH0/PWM2 => input PWM du 2nd pont en H
   13 00000000         ;pin 85/PH1/PWM3 => input Phase du 2nd pont en H 
   14 00000000         
   15 00000000         ;; Hexa corresponding values to pin numbers
   16 00000000 00000001 
                       GPIO_0  EQU              0x1
   17 00000000 00000002 
                       GPIO_1  EQU              0x2
   18 00000000 00000004 
                       GPIO_2  EQU              0x4
   19 00000000 00000020 
                       GPIO_5  EQU              0x20
   20 00000000         
   21 00000000         ;; pour enable clock    0x400FE000
   22 00000000 400FE100 
                       SYSCTL_RCGC0
                               EQU              0x400FE100  ;SYSCTL_RCGC0: offs
                                                            et 0x100 (p271 data
                                                            sheet de lm3s9b92.p
                                                            df)
   23 00000000 400FE108 
                       SYSCTL_RCGC2
                               EQU              0x400FE108  ;SYSCTL_RCGC2: offs
                                                            et 0x108 (p291 data
                                                            sheet de lm3s9b92.p
                                                            df)
   24 00000000         
   25 00000000         ;; General-Purpose Input/Outputs (GPIO) configuration
   26 00000000 40007000 
                       PORTD_BASE
                               EQU              0x40007000
   27 00000000 40007000 
                       GPIODATA_D
                               EQU              PORTD_BASE
   28 00000000 40007400 
                       GPIODIR_D
                               EQU              PORTD_BASE+0x00000400
   29 00000000 40007500 
                       GPIODR2R_D
                               EQU              PORTD_BASE+0x00000500
   30 00000000 4000751C 
                       GPIODEN_D
                               EQU              PORTD_BASE+0x0000051C
   31 00000000 4000752C 



ARM Macro Assembler    Page 2 


                       GPIOPCTL_D
                               EQU              PORTD_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   32 00000000 40007420 
                       GPIOAFSEL_D
                               EQU              PORTD_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   33 00000000         
   34 00000000 40027000 
                       PORTH_BASE
                               EQU              0x40027000
   35 00000000 40027000 
                       GPIODATA_H
                               EQU              PORTH_BASE
   36 00000000 40027400 
                       GPIODIR_H
                               EQU              PORTH_BASE+0x00000400
   37 00000000 40027500 
                       GPIODR2R_H
                               EQU              PORTH_BASE+0x00000500
   38 00000000 4002751C 
                       GPIODEN_H
                               EQU              PORTH_BASE+0x0000051C
   39 00000000 4002752C 
                       GPIOPCTL_H
                               EQU              PORTH_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   40 00000000 40027420 
                       GPIOAFSEL_H
                               EQU              PORTH_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   41 00000000         
   42 00000000         ;; Pulse Width Modulator (PWM) configuration
   43 00000000 40028000 
                       PWM_BASE
                               EQU              0x040028000 ;BASE des Block PWM
                                                             p.1138
   44 00000000 40028008 
                       PWMENABLE
                               EQU              PWM_BASE+0x008 ; p1145
   45 00000000         
   46 00000000         ;Block PWM0 pour sorties PWM0 et PWM1 (moteur 1)
   47 00000000 40028040 
                       PWM0CTL EQU              PWM_BASE+0x040 ;p1167
   48 00000000 40028050 
                       PWM0LOAD
                               EQU              PWM_BASE+0x050
   49 00000000 40028058 
                       PWM0CMPA
                               EQU              PWM_BASE+0x058
   50 00000000 4002805C 



ARM Macro Assembler    Page 3 


                       PWM0CMPB
                               EQU              PWM_BASE+0x05C
   51 00000000 40028060 
                       PWM0GENA
                               EQU              PWM_BASE+0x060
   52 00000000 40028064 
                       PWM0GENB
                               EQU              PWM_BASE+0x064
   53 00000000         
   54 00000000         ;Block PWM1 pour sorties PWM1 et PWM2 (moteur 2)
   55 00000000 40028080 
                       PWM1CTL EQU              PWM_BASE+0x080
   56 00000000 40028090 
                       PWM1LOAD
                               EQU              PWM_BASE+0x090
   57 00000000 40028098 
                       PWM1CMPA
                               EQU              PWM_BASE+0x098
   58 00000000 4002809C 
                       PWM1CMPB
                               EQU              PWM_BASE+0x09C
   59 00000000 400280A0 
                       PWM1GENA
                               EQU              PWM_BASE+0x0A0
   60 00000000 400280A4 
                       PWM1GENB
                               EQU              PWM_BASE+0x0A4
   61 00000000         
   62 00000000         
   63 00000000         ;VITESSE   EQU  0x2000000 ; Valeures plus petites => Vit
                       esse plus rapide exemple 0x192
   64 00000000 00000120 
                       VITESSE EQU              0x120       ; Valeures plus pet
                                                            ites => Vitesse plu
                                                            s rapide exemple 0x
                                                            192
   65 00000000         ; Valeures plus grandes => Vitesse moins rapide exemple 
                       0x1B2
   66 00000000 00000060 
                       VITESSE_RAPIDE
                               EQU              0x60
   67 00000000         
   68 00000000                 AREA             |.text|, CODE, READONLY
   69 00000000                 ENTRY
   70 00000000         
   71 00000000         
   72 00000000         ;; The EXPORT command specifies that a symbol can be acc
                       essed by other shared objects or executables.
   73 00000000                 EXPORT           MOTEUR_INIT
   74 00000000                 EXPORT           MOTEUR_DROIT_ON
   75 00000000                 EXPORT           MOTEUR_DROIT_OFF
   76 00000000                 EXPORT           MOTEUR_DROIT_AVANT
   77 00000000                 EXPORT           MOTEUR_DROIT_ARRIERE
   78 00000000                 EXPORT           MOTEUR_DROIT_INVERSE
   79 00000000                 EXPORT           MOTEUR_GAUCHE_ON
   80 00000000                 EXPORT           MOTEUR_GAUCHE_OFF
   81 00000000                 EXPORT           MOTEUR_GAUCHE_AVANT
   82 00000000                 EXPORT           MOTEUR_GAUCHE_ARRIERE
   83 00000000                 EXPORT           MOTEUR_GAUCHE_INVERSE



ARM Macro Assembler    Page 4 


   84 00000000                 EXPORT           MOTEUR_INIT_RAPIDE
   85 00000000         
   86 00000000         MOTEUR_INIT
   87 00000000 4E9D            ldr              r6, = SYSCTL_RCGC0
   88 00000002 6830            ldr              r0, [R6]
   89 00000004 F440 1080       ORR              r0, r0, #0x00100000 ;;bit 20 = 
                                                            PWM recoit clock: O
                                                            N (p271) 
   90 00000008 6030            str              r0, [r6]
   91 0000000A         
   92 0000000A         ;ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_1);PWM clock is pro
                       cessor clock /1
   93 0000000A         ;Je ne fais rien car par defaut = OK!!
   94 0000000A         ;*(int *) (0x400FE060)= *(int *)(0x400FE060)...;
   95 0000000A         
   96 0000000A         ;RCGC2 :  Enable port D GPIO(p291 ) car Moteur Droit sur
                        port D 
   97 0000000A 4E9C            ldr              r6, = SYSCTL_RCGC2
   98 0000000C 6830            ldr              r0, [R6]
   99 0000000E F040 0008       ORR              r0, r0, #0x08 ;; Enable port D 
                                                            GPIO 
  100 00000012 6030            str              r0, [r6]
  101 00000014         
  102 00000014         ;MOT2 : RCGC2 :  Enable port H GPIO  (2eme moteurs)
  103 00000014 4E99            ldr              r6, = SYSCTL_RCGC2
  104 00000016 6830            ldr              r0, [R6]
  105 00000018 F040 0080       ORR              r0, r0, #0x80 ;; Enable port H 
                                                            GPIO 
  106 0000001C 6030            str              r0, [r6]
  107 0000001E         
  108 0000001E BF00            nop
  109 00000020 BF00            nop
  110 00000022 BF00            nop
  111 00000024         
  112 00000024         ;;Pin muxing pour PWM, port D, reg. GPIOPCTL(p444), 4bit
                       s de PCM0=0001<=>PWM (voir p1261)
  113 00000024         ;;il faut mettre 1 pour avoir PD0=PWM0 et PD1=PWM1
  114 00000024 4E96            ldr              r6, = GPIOPCTL_D
  115 00000026         ;ldr r0, [R6]   ;; *(int *)(0x40007000+0x0000052C)=1;
  116 00000026         ;ORR r0, r0, #0x01 ;; Port D, pin 1 = PWM 
  117 00000026 F04F 0001       mov              r0, #0x01
  118 0000002A 6030            str              r0, [r6]
  119 0000002C         
  120 0000002C         ;;MOT2 : Pin muxing pour PWM, port H, reg. GPIOPCTL(p444
                       ), 4bits de PCM0=0001<=>PWM (voir p1261)
  121 0000002C         ;;il faut mettre mux = 2 pour avoir PH0=PWM2 et PH1=PWM3
                       
  122 0000002C 4E95            ldr              r6, = GPIOPCTL_H
  123 0000002E F04F 0002       mov              r0, #0x02
  124 00000032 6030            str              r0, [r6]
  125 00000034         
  126 00000034         ;;Alternate Function Select (p 426), PD0 utilise alernat
                       e fonction (PWM au dessus)
  127 00000034         ;;donc PD0 = 1
  128 00000034 4E94            ldr              r6, = GPIOAFSEL_D
  129 00000036 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000



ARM Macro Assembler    Page 5 


                                                            01;
  130 00000038 F040 0001       ORR              r0, r0, #0x01 ;
  131 0000003C 6030            str              r0, [r6]
  132 0000003E         
  133 0000003E         ;;MOT2 : Alternate Function Select (p 426), PH0 utilise 
                       PWM donc Alternate funct
  134 0000003E         ;;donc PH0 = 1
  135 0000003E 4E93            ldr              r6, = GPIOAFSEL_H
  136 00000040 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  137 00000042 F040 0001       ORR              r0, r0, #0x01 ;
  138 00000046 6030            str              r0, [r6]
  139 00000048         
  140 00000048         ;;-----------PWM0 pour moteur 1 connecté à PD0
  141 00000048         ;;PWM0 produit PWM0 et PWM1 output
  142 00000048         ;;Config Modes PWM0 + mode GenA + mode GenB
  143 00000048 4E91            ldr              r6, = PWM0CTL
  144 0000004A F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  145 0000004E 6030            str              r0, [r6]
  146 00000050         
  147 00000050 4E90            ldr              r6, =PWM0GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  148 00000052         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  149 00000052 F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  150 00000056 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  151 00000058         
  152 00000058 4E8F            ldr              r6, =PWM0GENB ;en comptage croi
                                                            ssant, qd comparate
                                                            urB = compteur => s
                                                            ortie pwmA=1
  153 0000005A F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  154 0000005E 6030            str              r0, [r6]
  155 00000060         ;Config Compteur, comparateur A et comparateur B
  156 00000060         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  157 00000060         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  158 00000060         ;;on divise par 2 car moteur 6v sur alim 12v
  159 00000060 4E8E            ldr              r6, =PWM0LOAD ;PWM0LOAD=periode
                                                            /2 =0x1F4
  160 00000062 F44F 70FA       mov              r0, #0x1F4
  161 00000066 6030            str              r0,[r6]
  162 00000068         
  163 00000068 4E8D            ldr              r6, =PWM0CMPA ;Valeur rapport c



ARM Macro Assembler    Page 6 


                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  164 0000006A F44F 7090       mov              r0, #VITESSE
  165 0000006E 6030            str              r0, [r6]
  166 00000070         
  167 00000070 4E8C            ldr              r6, =PWM0CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (rappo
                                                            rt cyclique depend 
                                                            de CMPA)
  168 00000072 F44F 70FA       mov              r0, #0x1F4
  169 00000076 6030            str              r0, [r6]
  170 00000078         
  171 00000078         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  172 00000078 4E85            ldr              r6, =PWM0CTL
  173 0000007A 6830            ldr              r0, [r6]
  174 0000007C F040 0007       ORR              r0, r0, #0x07
  175 00000080 6030            str              r0, [r6]
  176 00000082         
  177 00000082         ;;-----------PWM2 pour moteur 2 connecté à PH0
  178 00000082         ;;PWM1block produit PWM2 et PWM3 output
  179 00000082         ;;Config Modes PWM2 + mode GenA + mode GenB
  180 00000082 4E89            ldr              r6, = PWM1CTL
  181 00000084 F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  182 00000088 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x040)=2;
  183 0000008A         
  184 0000008A 4E88            ldr              r6, =PWM1GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  185 0000008C         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  186 0000008C F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  187 00000090 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  188 00000092         
  189 00000092         ;*(int *)(0x40028000+0x060)=0x0B0; //
  190 00000092 4E87            ldr              r6, =PWM1GENB ;*(int *)(0x40028
                                                            000+0x064)=0x0B00;
  191 00000094 F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  192 00000098 6030            str              r0, [r6]    ;en comptage croiss
                                                            ant, qd comparateur
                                                            B = compteur => sor
                                                            tie pwmA=1
  193 0000009A         ;Config Compteur, comparateur A et comparateur B
  194 0000009A         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  195 0000009A         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 



ARM Macro Assembler    Page 7 


  196 0000009A         ;;on divise par 2 car moteur 6v sur alim 12v
  197 0000009A         ;*(int *)(0x40028000+0x050)=0x1F4; //PWM0LOAD=periode/2 
                       =0x1F4
  198 0000009A 4E86            ldr              r6, =PWM1LOAD
  199 0000009C F44F 70FA       mov              r0, #0x1F4
  200 000000A0 6030            str              r0,[r6]
  201 000000A2         
  202 000000A2 4E85            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  203 000000A4 F44F 7090       mov              r0, #VITESSE
  204 000000A8 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x058)=0x01C2;
  205 000000AA         
  206 000000AA 4E84            ldr              r6, =PWM1CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (CMPA 
                                                            depend du rapport c
                                                            yclique)
  207 000000AC F44F 70FA       mov              r0, #0x1F4  ; *(int *)(0x400280
                                                            00+0x05C)=0x1F4; 
  208 000000B0 6030            str              r0, [r6]
  209 000000B2         
  210 000000B2         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  211 000000B2 4E7D            ldr              r6, =PWM1CTL
  212 000000B4 6830            ldr              r0, [r6]    ;*(int *) (0x400280
                                                            00+0x40)= *(int *)(
                                                            0x40028000+0x40) | 
                                                            0x07;
  213 000000B6 F040 0007       ORR              r0, r0, #0x07
  214 000000BA 6030            str              r0, [r6]
  215 000000BC         
  216 000000BC         ;;-----Fin config des PWMs   
  217 000000BC         
  218 000000BC         ;PORT D OUTPUT pin0 (pwm)=pin1(direction)=pin2(slow deca
                       y)=pin5(12v enable)
  219 000000BC 4E80            ldr              r6, =GPIODIR_D
  220 000000BE 6830            ldr              r0, [r6]
  221 000000C0 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  222 000000C4 6030            str              r0,[r6]
  223 000000C6         ;Port D, 2mA les meme
  224 000000C6 4E7F            ldr              r6, =GPIODR2R_D ; 
  225 000000C8 6830            ldr              r0, [r6]
  226 000000CA F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  227 000000CE 6030            str              r0,[r6]
  228 000000D0         ;Port D, Digital Enable
  229 000000D0 4E7D            ldr              r6, =GPIODEN_D ;
  230 000000D2 6830            ldr              r0, [r6]
  231 000000D4 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  232 000000D8 6030            str              r0,[r6]
  233 000000DA         ;Port D : mise à 1 de slow Decay et 12V et mise à 0 pour
                        dir et pwm
  234 000000DA 4E7C            ldr              r6, =(GPIODATA_D+((GPIO_0+GPIO_
1+GPIO_2+GPIO_5)<<2))
  235 000000DC F04F 0024       mov              r0, #(GPIO_2+GPIO_5) ; #0x24



ARM Macro Assembler    Page 8 


  236 000000E0 6030            str              r0,[r6]
  237 000000E2         
  238 000000E2         ;MOT2, PH1 pour sens moteur ouput
  239 000000E2 4E7B            ldr              r6, =GPIODIR_H
  240 000000E4 F04F 0003       mov              r0, #0x03   ; 
  241 000000E8 6030            str              r0,[r6]
  242 000000EA         ;Port H, 2mA les meme
  243 000000EA 4E7A            ldr              r6, =GPIODR2R_H
  244 000000EC F04F 0003       mov              r0, #0x03
  245 000000F0 6030            str              r0,[r6]
  246 000000F2         ;Port H, Digital Enable
  247 000000F2 4E79            ldr              r6, =GPIODEN_H
  248 000000F4 F04F 0003       mov              r0, #0x03
  249 000000F8 6030            str              r0,[r6]
  250 000000FA         ;Port H : mise à 1 pour dir 
  251 000000FA 4E78            ldr              r6, =(GPIODATA_H +(GPIO_1<<2))
  252 000000FC F04F 0002       mov              r0, #0x02
  253 00000100 6030            str              r0,[r6]
  254 00000102         
  255 00000102 4770            BX               LR          ; FIN du sous progr
                                                            amme d'init.
  256 00000104         
  257 00000104         ;Enable PWM0 (bit 0) et PWM2 (bit 2) p1145 
  258 00000104         ;Attention ici c'est les sorties PWM0 et PWM2
  259 00000104         ;qu'on controle, pas les blocks PWM0 et PWM1!!!
  260 00000104         MOTEUR_DROIT_ON
  261 00000104         ;Enable sortie PWM0 (bit 0), p1145 
  262 00000104 4E76            ldr              r6, =PWMENABLE
  263 00000106 6830            ldr              r0, [r6]
  264 00000108 F040 0001       orr              r0, #0x01   ;bit 0 à 1
  265 0000010C 6030            str              r0, [r6]
  266 0000010E 4770            BX               LR
  267 00000110         
  268 00000110         MOTEUR_DROIT_OFF
  269 00000110 4E73            ldr              r6, =PWMENABLE
  270 00000112 6830            ldr              r0, [r6]
  271 00000114 F000 000E       and              r0, #0x0E   ;bit 0 à 0
  272 00000118 6030            str              r0, [r6]
  273 0000011A 4770            BX               LR
  274 0000011C         
  275 0000011C         MOTEUR_GAUCHE_ON
  276 0000011C 4E70            ldr              r6, =PWMENABLE
  277 0000011E 6830            ldr              r0, [r6]
  278 00000120 F040 0004       orr              r0, #0x04   ;bit 2 à 1
  279 00000124 6030            str              r0, [r6]
  280 00000126 4770            BX               LR
  281 00000128         
  282 00000128         MOTEUR_GAUCHE_OFF
  283 00000128 4E6D            ldr              r6, =PWMENABLE
  284 0000012A 6830            ldr              r0, [r6]
  285 0000012C F000 000B       and              r0, #0x0B   ;bit 2 à 0
  286 00000130 6030            str              r0, [r6]
  287 00000132 4770            BX               LR
  288 00000134         
  289 00000134         MOTEUR_DROIT_ARRIERE
  290 00000134         ;Inverse Direction (GPIO_D1)
  291 00000134 4E6B            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  292 00000136 F04F 0000       mov              r0, #0
  293 0000013A 6030            str              r0,[r6]



ARM Macro Assembler    Page 9 


  294 0000013C 4770            BX               LR
  295 0000013E         
  296 0000013E         MOTEUR_DROIT_AVANT
  297 0000013E         ;Inverse Direction (GPIO_D1)
  298 0000013E 4E69            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  299 00000140 F04F 0002       mov              r0, #2
  300 00000144 6030            str              r0,[r6]
  301 00000146 4770            BX               LR
  302 00000148         
  303 00000148         MOTEUR_GAUCHE_ARRIERE
  304 00000148         ;Inverse Direction (GPIO_D1)
  305 00000148 4E64            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  306 0000014A F04F 0002       mov              r0, #2      ; contraire du mote
                                                            ur Droit
  307 0000014E 6030            str              r0,[r6]
  308 00000150 4770            BX               LR
  309 00000152         
  310 00000152         MOTEUR_GAUCHE_AVANT
  311 00000152         ;Inverse Direction (GPIO_D1)
  312 00000152 4E62            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  313 00000154 F04F 0000       mov              r0, #0
  314 00000158 6030            str              r0,[r6]
  315 0000015A 4770            BX               LR
  316 0000015C         
  317 0000015C         MOTEUR_DROIT_INVERSE
  318 0000015C         ;Inverse Direction (GPIO_D1)
  319 0000015C 4E61            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  320 0000015E 6831            ldr              r1, [r6]
  321 00000160 F081 0002       EOR              r0, r1, #GPIO_1
  322 00000164 6030            str              r0,[r6]
  323 00000166 4770            BX               LR
  324 00000168         
  325 00000168         MOTEUR_GAUCHE_INVERSE
  326 00000168         ;Inverse Direction (GPIO_D1)
  327 00000168 4E5C            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  328 0000016A 6831            ldr              r1, [r6]
  329 0000016C F081 0002       EOR              r0, r1, #GPIO_1
  330 00000170 6030            str              r0,[r6]
  331 00000172 4770            BX               LR
  332 00000174         
  333 00000174         MOTEUR_INIT_RAPIDE
  334 00000174 4E40            ldr              r6, = SYSCTL_RCGC0
  335 00000176 6830            ldr              r0, [R6]
  336 00000178 F440 1080       ORR              r0, r0, #0x00100000 ;;bit 20 = 
                                                            PWM recoit clock: O
                                                            N (p271) 
  337 0000017C 6030            str              r0, [r6]
  338 0000017E         
  339 0000017E         ;ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_1);PWM clock is pro
                       cessor clock /1
  340 0000017E         ;Je ne fais rien car par defaut = OK!!
  341 0000017E         ;*(int *) (0x400FE060)= *(int *)(0x400FE060)...;
  342 0000017E         
  343 0000017E         ;RCGC2 :  Enable port D GPIO(p291 ) car Moteur Droit sur
                        port D 
  344 0000017E 4E3F            ldr              r6, = SYSCTL_RCGC2
  345 00000180 6830            ldr              r0, [R6]
  346 00000182 F040 0008       ORR              r0, r0, #0x08 ;; Enable port D 
                                                            GPIO 



ARM Macro Assembler    Page 10 


  347 00000186 6030            str              r0, [r6]
  348 00000188         
  349 00000188         ;MOT2 : RCGC2 :  Enable port H GPIO  (2eme moteurs)
  350 00000188 4E3C            ldr              r6, = SYSCTL_RCGC2
  351 0000018A 6830            ldr              r0, [R6]
  352 0000018C F040 0080       ORR              r0, r0, #0x80 ;; Enable port H 
                                                            GPIO 
  353 00000190 6030            str              r0, [r6]
  354 00000192         
  355 00000192 BF00            nop
  356 00000194 BF00            nop
  357 00000196 BF00            nop
  358 00000198         
  359 00000198         ;;Pin muxing pour PWM, port D, reg. GPIOPCTL(p444), 4bit
                       s de PCM0=0001<=>PWM (voir p1261)
  360 00000198         ;;il faut mettre 1 pour avoir PD0=PWM0 et PD1=PWM1
  361 00000198 4E39            ldr              r6, = GPIOPCTL_D
  362 0000019A         ;ldr r0, [R6]   ;; *(int *)(0x40007000+0x0000052C)=1;
  363 0000019A         ;ORR r0, r0, #0x01 ;; Port D, pin 1 = PWM 
  364 0000019A F04F 0001       mov              r0, #0x01
  365 0000019E 6030            str              r0, [r6]
  366 000001A0         
  367 000001A0         ;;MOT2 : Pin muxing pour PWM, port H, reg. GPIOPCTL(p444
                       ), 4bits de PCM0=0001<=>PWM (voir p1261)
  368 000001A0         ;;il faut mettre mux = 2 pour avoir PH0=PWM2 et PH1=PWM3
                       
  369 000001A0 4E38            ldr              r6, = GPIOPCTL_H
  370 000001A2 F04F 0002       mov              r0, #0x02
  371 000001A6 6030            str              r0, [r6]
  372 000001A8         
  373 000001A8         ;;Alternate Function Select (p 426), PD0 utilise alernat
                       e fonction (PWM au dessus)
  374 000001A8         ;;donc PD0 = 1
  375 000001A8 4E37            ldr              r6, = GPIOAFSEL_D
  376 000001AA 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  377 000001AC F040 0001       ORR              r0, r0, #0x01 ;
  378 000001B0 6030            str              r0, [r6]
  379 000001B2         
  380 000001B2         ;;MOT2 : Alternate Function Select (p 426), PH0 utilise 
                       PWM donc Alternate funct
  381 000001B2         ;;donc PH0 = 1
  382 000001B2 4E36            ldr              r6, = GPIOAFSEL_H
  383 000001B4 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  384 000001B6 F040 0001       ORR              r0, r0, #0x01 ;
  385 000001BA 6030            str              r0, [r6]
  386 000001BC         
  387 000001BC         ;;-----------PWM0 pour moteur 1 connecté à PD0
  388 000001BC         ;;PWM0 produit PWM0 et PWM1 output
  389 000001BC         ;;Config Modes PWM0 + mode GenA + mode GenB
  390 000001BC 4E34            ldr              r6, = PWM0CTL
  391 000001BE F04F 0002       mov              r0, #2      ;Mode up-down-up-do



ARM Macro Assembler    Page 11 


                                                            wn, pas synchro
  392 000001C2 6030            str              r0, [r6]
  393 000001C4         
  394 000001C4 4E33            ldr              r6, =PWM0GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  395 000001C6         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  396 000001C6 F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  397 000001CA 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  398 000001CC         
  399 000001CC 4E32            ldr              r6, =PWM0GENB ;en comptage croi
                                                            ssant, qd comparate
                                                            urB = compteur => s
                                                            ortie pwmA=1
  400 000001CE F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  401 000001D2 6030            str              r0, [r6]
  402 000001D4         ;Config Compteur, comparateur A et comparateur B
  403 000001D4         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  404 000001D4         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  405 000001D4         ;;on divise par 2 car moteur 6v sur alim 12v
  406 000001D4 4E31            ldr              r6, =PWM0LOAD ;PWM0LOAD=periode
                                                            /2 =0x1F4
  407 000001D6 F44F 70FA       mov              r0, #0x1F4
  408 000001DA 6030            str              r0,[r6]
  409 000001DC         
  410 000001DC 4E30            ldr              r6, =PWM0CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  411 000001DE F04F 0060       mov              r0, #VITESSE_RAPIDE
  412 000001E2 6030            str              r0, [r6]
  413 000001E4         
  414 000001E4 4E2F            ldr              r6, =PWM0CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (rappo
                                                            rt cyclique depend 
                                                            de CMPA)
  415 000001E6 F44F 70FA       mov              r0, #0x1F4
  416 000001EA 6030            str              r0, [r6]
  417 000001EC         
  418 000001EC         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  419 000001EC 4E28            ldr              r6, =PWM0CTL
  420 000001EE 6830            ldr              r0, [r6]
  421 000001F0 F040 0007       ORR              r0, r0, #0x07
  422 000001F4 6030            str              r0, [r6]
  423 000001F6         
  424 000001F6         ;;-----------PWM2 pour moteur 2 connecté à PH0



ARM Macro Assembler    Page 12 


  425 000001F6         ;;PWM1block produit PWM2 et PWM3 output
  426 000001F6         ;;Config Modes PWM2 + mode GenA + mode GenB
  427 000001F6 4E2C            ldr              r6, = PWM1CTL
  428 000001F8 F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  429 000001FC 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x040)=2;
  430 000001FE         
  431 000001FE 4E2B            ldr              r6, =PWM1GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  432 00000200         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  433 00000200 F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  434 00000204 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  435 00000206         
  436 00000206         ;*(int *)(0x40028000+0x060)=0x0B0; //
  437 00000206 4E2A            ldr              r6, =PWM1GENB ;*(int *)(0x40028
                                                            000+0x064)=0x0B00;
  438 00000208 F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  439 0000020C 6030            str              r0, [r6]    ;en comptage croiss
                                                            ant, qd comparateur
                                                            B = compteur => sor
                                                            tie pwmA=1
  440 0000020E         ;Config Compteur, comparateur A et comparateur B
  441 0000020E         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  442 0000020E         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  443 0000020E         ;;on divise par 2 car moteur 6v sur alim 12v
  444 0000020E         ;*(int *)(0x40028000+0x050)=0x1F4; //PWM0LOAD=periode/2 
                       =0x1F4
  445 0000020E 4E29            ldr              r6, =PWM1LOAD
  446 00000210 F44F 70FA       mov              r0, #0x1F4
  447 00000214 6030            str              r0,[r6]
  448 00000216         
  449 00000216 4E28            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  450 00000218 F04F 0060       mov              r0, #VITESSE_RAPIDE
  451 0000021C 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x058)=0x01C2;
  452 0000021E         
  453 0000021E 4E27            ldr              r6, =PWM1CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (CMPA 
                                                            depend du rapport c
                                                            yclique)
  454 00000220 F44F 70FA       mov              r0, #0x1F4  ; *(int *)(0x400280
                                                            00+0x05C)=0x1F4; 



ARM Macro Assembler    Page 13 


  455 00000224 6030            str              r0, [r6]
  456 00000226         
  457 00000226         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  458 00000226 4E20            ldr              r6, =PWM1CTL
  459 00000228 6830            ldr              r0, [r6]    ;*(int *) (0x400280
                                                            00+0x40)= *(int *)(
                                                            0x40028000+0x40) | 
                                                            0x07;
  460 0000022A F040 0007       ORR              r0, r0, #0x07
  461 0000022E 6030            str              r0, [r6]
  462 00000230         
  463 00000230         ;;-----Fin config des PWMs   
  464 00000230         
  465 00000230         ;PORT D OUTPUT pin0 (pwm)=pin1(direction)=pin2(slow deca
                       y)=pin5(12v enable)
  466 00000230 4E23            ldr              r6, =GPIODIR_D
  467 00000232 6830            ldr              r0, [r6]
  468 00000234 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  469 00000238 6030            str              r0,[r6]
  470 0000023A         ;Port D, 2mA les meme
  471 0000023A 4E22            ldr              r6, =GPIODR2R_D ; 
  472 0000023C 6830            ldr              r0, [r6]
  473 0000023E F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  474 00000242 6030            str              r0,[r6]
  475 00000244         ;Port D, Digital Enable
  476 00000244 4E20            ldr              r6, =GPIODEN_D ;
  477 00000246 6830            ldr              r0, [r6]
  478 00000248 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  479 0000024C 6030            str              r0,[r6]
  480 0000024E         ;Port D : mise à 1 de slow Decay et 12V et mise à 0 pour
                        dir et pwm
  481 0000024E 4E1F            ldr              r6, =(GPIODATA_D+((GPIO_0+GPIO_
1+GPIO_2+GPIO_5)<<2))
  482 00000250 F04F 0024       mov              r0, #(GPIO_2+GPIO_5) ; #0x24
  483 00000254 6030            str              r0,[r6]
  484 00000256         
  485 00000256         ;MOT2, PH1 pour sens moteur ouput
  486 00000256 4E1E            ldr              r6, =GPIODIR_H
  487 00000258 F04F 0003       mov              r0, #0x03   ; 
  488 0000025C 6030            str              r0,[r6]
  489 0000025E         ;Port H, 2mA les meme
  490 0000025E 4E1D            ldr              r6, =GPIODR2R_H
  491 00000260 F04F 0003       mov              r0, #0x03
  492 00000264 6030            str              r0,[r6]
  493 00000266         ;Port H, Digital Enable
  494 00000266 4E1C            ldr              r6, =GPIODEN_H
  495 00000268 F04F 0003       mov              r0, #0x03
  496 0000026C 6030            str              r0,[r6]
  497 0000026E         ;Port H : mise à 1 pour dir 
  498 0000026E 4E1B            ldr              r6, =(GPIODATA_H +(GPIO_1<<2))
  499 00000270 F04F 0002       mov              r0, #0x02
  500 00000274 6030            str              r0,[r6]
  501 00000276         
  502 00000276 4770            BX               LR          ; FIN du sous progr
                                                            amme d'init.



ARM Macro Assembler    Page 14 


  503 00000278         
  504 00000278         
  505 00000278         
  506 00000278                 END
              400FE100 
              400FE108 
              4000752C 
              4002752C 
              40007420 
              40027420 
              40028040 
              40028060 
              40028064 
              40028050 
              40028058 
              4002805C 
              40028080 
              400280A0 
              400280A4 
              40028090 
              40028098 
              4002809C 
              40007400 
              40007500 
              4000751C 
              4000709C 
              40027400 
              40027500 
              4002751C 
              40027008 
              40028008 
              40007008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rk_moteur.d -o.\objects\rk_moteur.o -I.\RTE\_Target_1 -I
C:\Users\vince\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\
Users\vince\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM3\Include -
-predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISI
ON_VERSION SETA 532" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --p
redefine="_RTE_ SETA 1" --list=.\listings\rk_moteur.lst RK_Moteur.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 68 in file RK_Moteur.s
   Uses
      None
Comment: .text unused
MOTEUR_DROIT_ARRIERE 00000134

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 289 in file RK_Moteur.s
   Uses
      At line 77 in file RK_Moteur.s
Comment: MOTEUR_DROIT_ARRIERE used once
MOTEUR_DROIT_AVANT 0000013E

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 296 in file RK_Moteur.s
   Uses
      At line 76 in file RK_Moteur.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 0000015C

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 317 in file RK_Moteur.s
   Uses
      At line 78 in file RK_Moteur.s
Comment: MOTEUR_DROIT_INVERSE used once
MOTEUR_DROIT_OFF 00000110

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 268 in file RK_Moteur.s
   Uses
      At line 75 in file RK_Moteur.s
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 00000104

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 260 in file RK_Moteur.s
   Uses
      At line 74 in file RK_Moteur.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000148

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 303 in file RK_Moteur.s
   Uses
      At line 82 in file RK_Moteur.s
Comment: MOTEUR_GAUCHE_ARRIERE used once
MOTEUR_GAUCHE_AVANT 00000152

Symbol: MOTEUR_GAUCHE_AVANT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 310 in file RK_Moteur.s
   Uses
      At line 81 in file RK_Moteur.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000168

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 325 in file RK_Moteur.s
   Uses
      At line 83 in file RK_Moteur.s
Comment: MOTEUR_GAUCHE_INVERSE used once
MOTEUR_GAUCHE_OFF 00000128

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 282 in file RK_Moteur.s
   Uses
      At line 80 in file RK_Moteur.s
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 0000011C

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 275 in file RK_Moteur.s
   Uses
      At line 79 in file RK_Moteur.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 86 in file RK_Moteur.s
   Uses
      At line 73 in file RK_Moteur.s
Comment: MOTEUR_INIT used once
MOTEUR_INIT_RAPIDE 00000174

Symbol: MOTEUR_INIT_RAPIDE
   Definitions
      At line 333 in file RK_Moteur.s
   Uses
      At line 84 in file RK_Moteur.s
Comment: MOTEUR_INIT_RAPIDE used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOAFSEL_D 40007420

Symbol: GPIOAFSEL_D
   Definitions
      At line 32 in file RK_Moteur.s
   Uses
      At line 128 in file RK_Moteur.s
      At line 375 in file RK_Moteur.s

GPIOAFSEL_H 40027420

Symbol: GPIOAFSEL_H
   Definitions
      At line 40 in file RK_Moteur.s
   Uses
      At line 135 in file RK_Moteur.s
      At line 382 in file RK_Moteur.s

GPIODATA_D 40007000

Symbol: GPIODATA_D
   Definitions
      At line 27 in file RK_Moteur.s
   Uses
      At line 234 in file RK_Moteur.s
      At line 291 in file RK_Moteur.s
      At line 298 in file RK_Moteur.s
      At line 319 in file RK_Moteur.s
      At line 481 in file RK_Moteur.s

GPIODATA_H 40027000

Symbol: GPIODATA_H
   Definitions
      At line 35 in file RK_Moteur.s
   Uses
      At line 251 in file RK_Moteur.s
      At line 305 in file RK_Moteur.s
      At line 312 in file RK_Moteur.s
      At line 327 in file RK_Moteur.s
      At line 498 in file RK_Moteur.s

GPIODEN_D 4000751C

Symbol: GPIODEN_D
   Definitions
      At line 30 in file RK_Moteur.s
   Uses
      At line 229 in file RK_Moteur.s
      At line 476 in file RK_Moteur.s

GPIODEN_H 4002751C

Symbol: GPIODEN_H
   Definitions
      At line 38 in file RK_Moteur.s
   Uses
      At line 247 in file RK_Moteur.s
      At line 494 in file RK_Moteur.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


GPIODIR_D 40007400

Symbol: GPIODIR_D
   Definitions
      At line 28 in file RK_Moteur.s
   Uses
      At line 219 in file RK_Moteur.s
      At line 466 in file RK_Moteur.s

GPIODIR_H 40027400

Symbol: GPIODIR_H
   Definitions
      At line 36 in file RK_Moteur.s
   Uses
      At line 239 in file RK_Moteur.s
      At line 486 in file RK_Moteur.s

GPIODR2R_D 40007500

Symbol: GPIODR2R_D
   Definitions
      At line 29 in file RK_Moteur.s
   Uses
      At line 224 in file RK_Moteur.s
      At line 471 in file RK_Moteur.s

GPIODR2R_H 40027500

Symbol: GPIODR2R_H
   Definitions
      At line 37 in file RK_Moteur.s
   Uses
      At line 243 in file RK_Moteur.s
      At line 490 in file RK_Moteur.s

GPIOPCTL_D 4000752C

Symbol: GPIOPCTL_D
   Definitions
      At line 31 in file RK_Moteur.s
   Uses
      At line 114 in file RK_Moteur.s
      At line 361 in file RK_Moteur.s

GPIOPCTL_H 4002752C

Symbol: GPIOPCTL_H
   Definitions
      At line 39 in file RK_Moteur.s
   Uses
      At line 122 in file RK_Moteur.s
      At line 369 in file RK_Moteur.s

GPIO_0 00000001

Symbol: GPIO_0
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 16 in file RK_Moteur.s
   Uses
      At line 221 in file RK_Moteur.s
      At line 226 in file RK_Moteur.s
      At line 231 in file RK_Moteur.s
      At line 234 in file RK_Moteur.s
      At line 468 in file RK_Moteur.s
      At line 473 in file RK_Moteur.s
      At line 478 in file RK_Moteur.s
      At line 481 in file RK_Moteur.s

GPIO_1 00000002

Symbol: GPIO_1
   Definitions
      At line 17 in file RK_Moteur.s
   Uses
      At line 221 in file RK_Moteur.s
      At line 226 in file RK_Moteur.s
      At line 231 in file RK_Moteur.s
      At line 234 in file RK_Moteur.s
      At line 251 in file RK_Moteur.s
      At line 291 in file RK_Moteur.s
      At line 298 in file RK_Moteur.s
      At line 305 in file RK_Moteur.s
      At line 312 in file RK_Moteur.s
      At line 319 in file RK_Moteur.s
      At line 321 in file RK_Moteur.s
      At line 327 in file RK_Moteur.s
      At line 329 in file RK_Moteur.s
      At line 468 in file RK_Moteur.s
      At line 473 in file RK_Moteur.s
      At line 478 in file RK_Moteur.s
      At line 481 in file RK_Moteur.s
      At line 498 in file RK_Moteur.s

GPIO_2 00000004

Symbol: GPIO_2
   Definitions
      At line 18 in file RK_Moteur.s
   Uses
      At line 221 in file RK_Moteur.s
      At line 226 in file RK_Moteur.s
      At line 231 in file RK_Moteur.s
      At line 234 in file RK_Moteur.s
      At line 235 in file RK_Moteur.s
      At line 468 in file RK_Moteur.s
      At line 473 in file RK_Moteur.s
      At line 478 in file RK_Moteur.s
      At line 481 in file RK_Moteur.s
      At line 482 in file RK_Moteur.s

GPIO_5 00000020

Symbol: GPIO_5
   Definitions
      At line 19 in file RK_Moteur.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 221 in file RK_Moteur.s
      At line 226 in file RK_Moteur.s
      At line 231 in file RK_Moteur.s
      At line 234 in file RK_Moteur.s
      At line 235 in file RK_Moteur.s
      At line 468 in file RK_Moteur.s
      At line 473 in file RK_Moteur.s
      At line 478 in file RK_Moteur.s
      At line 481 in file RK_Moteur.s
      At line 482 in file RK_Moteur.s

PORTD_BASE 40007000

Symbol: PORTD_BASE
   Definitions
      At line 26 in file RK_Moteur.s
   Uses
      At line 27 in file RK_Moteur.s
      At line 28 in file RK_Moteur.s
      At line 29 in file RK_Moteur.s
      At line 30 in file RK_Moteur.s
      At line 31 in file RK_Moteur.s
      At line 32 in file RK_Moteur.s

PORTH_BASE 40027000

Symbol: PORTH_BASE
   Definitions
      At line 34 in file RK_Moteur.s
   Uses
      At line 35 in file RK_Moteur.s
      At line 36 in file RK_Moteur.s
      At line 37 in file RK_Moteur.s
      At line 38 in file RK_Moteur.s
      At line 39 in file RK_Moteur.s
      At line 40 in file RK_Moteur.s

PWM0CMPA 40028058

Symbol: PWM0CMPA
   Definitions
      At line 49 in file RK_Moteur.s
   Uses
      At line 163 in file RK_Moteur.s
      At line 410 in file RK_Moteur.s

PWM0CMPB 4002805C

Symbol: PWM0CMPB
   Definitions
      At line 50 in file RK_Moteur.s
   Uses
      At line 167 in file RK_Moteur.s
      At line 414 in file RK_Moteur.s

PWM0CTL 40028040

Symbol: PWM0CTL
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 47 in file RK_Moteur.s
   Uses
      At line 143 in file RK_Moteur.s
      At line 172 in file RK_Moteur.s
      At line 390 in file RK_Moteur.s
      At line 419 in file RK_Moteur.s

PWM0GENA 40028060

Symbol: PWM0GENA
   Definitions
      At line 51 in file RK_Moteur.s
   Uses
      At line 147 in file RK_Moteur.s
      At line 394 in file RK_Moteur.s

PWM0GENB 40028064

Symbol: PWM0GENB
   Definitions
      At line 52 in file RK_Moteur.s
   Uses
      At line 152 in file RK_Moteur.s
      At line 399 in file RK_Moteur.s

PWM0LOAD 40028050

Symbol: PWM0LOAD
   Definitions
      At line 48 in file RK_Moteur.s
   Uses
      At line 159 in file RK_Moteur.s
      At line 406 in file RK_Moteur.s

PWM1CMPA 40028098

Symbol: PWM1CMPA
   Definitions
      At line 57 in file RK_Moteur.s
   Uses
      At line 202 in file RK_Moteur.s
      At line 449 in file RK_Moteur.s

PWM1CMPB 4002809C

Symbol: PWM1CMPB
   Definitions
      At line 58 in file RK_Moteur.s
   Uses
      At line 206 in file RK_Moteur.s
      At line 453 in file RK_Moteur.s

PWM1CTL 40028080

Symbol: PWM1CTL
   Definitions
      At line 55 in file RK_Moteur.s
   Uses
      At line 180 in file RK_Moteur.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 211 in file RK_Moteur.s
      At line 427 in file RK_Moteur.s
      At line 458 in file RK_Moteur.s

PWM1GENA 400280A0

Symbol: PWM1GENA
   Definitions
      At line 59 in file RK_Moteur.s
   Uses
      At line 184 in file RK_Moteur.s
      At line 431 in file RK_Moteur.s

PWM1GENB 400280A4

Symbol: PWM1GENB
   Definitions
      At line 60 in file RK_Moteur.s
   Uses
      At line 190 in file RK_Moteur.s
      At line 437 in file RK_Moteur.s

PWM1LOAD 40028090

Symbol: PWM1LOAD
   Definitions
      At line 56 in file RK_Moteur.s
   Uses
      At line 198 in file RK_Moteur.s
      At line 445 in file RK_Moteur.s

PWMENABLE 40028008

Symbol: PWMENABLE
   Definitions
      At line 44 in file RK_Moteur.s
   Uses
      At line 262 in file RK_Moteur.s
      At line 269 in file RK_Moteur.s
      At line 276 in file RK_Moteur.s
      At line 283 in file RK_Moteur.s

PWM_BASE 40028000

Symbol: PWM_BASE
   Definitions
      At line 43 in file RK_Moteur.s
   Uses
      At line 44 in file RK_Moteur.s
      At line 47 in file RK_Moteur.s
      At line 48 in file RK_Moteur.s
      At line 49 in file RK_Moteur.s
      At line 50 in file RK_Moteur.s
      At line 51 in file RK_Moteur.s
      At line 52 in file RK_Moteur.s
      At line 55 in file RK_Moteur.s
      At line 56 in file RK_Moteur.s
      At line 57 in file RK_Moteur.s
      At line 58 in file RK_Moteur.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 59 in file RK_Moteur.s
      At line 60 in file RK_Moteur.s

SYSCTL_RCGC0 400FE100

Symbol: SYSCTL_RCGC0
   Definitions
      At line 22 in file RK_Moteur.s
   Uses
      At line 87 in file RK_Moteur.s
      At line 334 in file RK_Moteur.s

SYSCTL_RCGC2 400FE108

Symbol: SYSCTL_RCGC2
   Definitions
      At line 23 in file RK_Moteur.s
   Uses
      At line 97 in file RK_Moteur.s
      At line 103 in file RK_Moteur.s
      At line 344 in file RK_Moteur.s
      At line 350 in file RK_Moteur.s

VITESSE 00000120

Symbol: VITESSE
   Definitions
      At line 64 in file RK_Moteur.s
   Uses
      At line 164 in file RK_Moteur.s
      At line 203 in file RK_Moteur.s

VITESSE_RAPIDE 00000060

Symbol: VITESSE_RAPIDE
   Definitions
      At line 66 in file RK_Moteur.s
   Uses
      At line 411 in file RK_Moteur.s
      At line 450 in file RK_Moteur.s

36 symbols
386 symbols in table
