


ARM Macro Assembler    Page 1 


    1 00000000         ; M. Akil, T. Grandpierre, R. Kachouri : département IT 
                       - ESIEE Paris -
    2 00000000         ; 01/2013 - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (configure les pwms + GPIO)
    4 00000000         
    5 00000000         ;Les pages se réfèrent au datasheet lm3s9b92.pdf
    6 00000000         
    7 00000000         ;Cablage :
    8 00000000         ;pin 10/PD0/PWM0 => input PWM du pont en H DRV8801RT
    9 00000000         ;pin 11/PD1/PWM1 => input Phase_R  du pont en H DRV8801R
                       T
   10 00000000         ;pin 12/PD2   => input SlowDecay commune aux 2 ponts en 
                       H
   11 00000000         ;pin 98/PD5   => input Enable 12v du conv DC/DC 
   12 00000000         ;pin 86/PH0/PWM2 => input PWM du 2nd pont en H
   13 00000000         ;pin 85/PH1/PWM3 => input Phase du 2nd pont en H 
   14 00000000         
   15 00000000         ;; Hexa corresponding values to pin numbers
   16 00000000 00000001 
                       GPIO_0  EQU              0x1
   17 00000000 00000002 
                       GPIO_1  EQU              0x2
   18 00000000 00000004 
                       GPIO_2  EQU              0x4
   19 00000000 00000020 
                       GPIO_5  EQU              0x20
   20 00000000         
   21 00000000         ;; pour enable clock    0x400FE000
   22 00000000 400FE100 
                       SYSCTL_RCGC0
                               EQU              0x400FE100  ;SYSCTL_RCGC0: offs
                                                            et 0x100 (p271 data
                                                            sheet de lm3s9b92.p
                                                            df)
   23 00000000 400FE108 
                       SYSCTL_RCGC2
                               EQU              0x400FE108  ;SYSCTL_RCGC2: offs
                                                            et 0x108 (p291 data
                                                            sheet de lm3s9b92.p
                                                            df)
   24 00000000         
   25 00000000         ;; General-Purpose Input/Outputs (GPIO) configuration
   26 00000000 40007000 
                       PORTD_BASE
                               EQU              0x40007000
   27 00000000 40007000 
                       GPIODATA_D
                               EQU              PORTD_BASE
   28 00000000 40007400 
                       GPIODIR_D
                               EQU              PORTD_BASE+0x00000400
   29 00000000 40007500 
                       GPIODR2R_D
                               EQU              PORTD_BASE+0x00000500
   30 00000000 4000751C 
                       GPIODEN_D
                               EQU              PORTD_BASE+0x0000051C
   31 00000000 4000752C 



ARM Macro Assembler    Page 2 


                       GPIOPCTL_D
                               EQU              PORTD_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   32 00000000 40007420 
                       GPIOAFSEL_D
                               EQU              PORTD_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   33 00000000         
   34 00000000 40027000 
                       PORTH_BASE
                               EQU              0x40027000
   35 00000000 40027000 
                       GPIODATA_H
                               EQU              PORTH_BASE
   36 00000000 40027400 
                       GPIODIR_H
                               EQU              PORTH_BASE+0x00000400
   37 00000000 40027500 
                       GPIODR2R_H
                               EQU              PORTH_BASE+0x00000500
   38 00000000 4002751C 
                       GPIODEN_H
                               EQU              PORTH_BASE+0x0000051C
   39 00000000 4002752C 
                       GPIOPCTL_H
                               EQU              PORTH_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   40 00000000 40027420 
                       GPIOAFSEL_H
                               EQU              PORTH_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   41 00000000         
   42 00000000         ;; Pulse Width Modulator (PWM) configuration
   43 00000000 40028000 
                       PWM_BASE
                               EQU              0x040028000 ;BASE des Block PWM
                                                             p.1138
   44 00000000 40028008 
                       PWMENABLE
                               EQU              PWM_BASE+0x008 ; p1145
   45 00000000         
   46 00000000         ;Block PWM0 pour sorties PWM0 et PWM1 (moteur 1)
   47 00000000 40028040 
                       PWM0CTL EQU              PWM_BASE+0x040 ;p1167
   48 00000000 40028050 
                       PWM0LOAD
                               EQU              PWM_BASE+0x050
   49 00000000 40028058 
                       PWM0CMPA
                               EQU              PWM_BASE+0x058
   50 00000000 4002805C 



ARM Macro Assembler    Page 3 


                       PWM0CMPB
                               EQU              PWM_BASE+0x05C
   51 00000000 40028060 
                       PWM0GENA
                               EQU              PWM_BASE+0x060
   52 00000000 40028064 
                       PWM0GENB
                               EQU              PWM_BASE+0x064
   53 00000000         
   54 00000000         ;Block PWM1 pour sorties PWM1 et PWM2 (moteur 2)
   55 00000000 40028080 
                       PWM1CTL EQU              PWM_BASE+0x080
   56 00000000 40028090 
                       PWM1LOAD
                               EQU              PWM_BASE+0x090
   57 00000000 40028098 
                       PWM1CMPA
                               EQU              PWM_BASE+0x098
   58 00000000 4002809C 
                       PWM1CMPB
                               EQU              PWM_BASE+0x09C
   59 00000000 400280A0 
                       PWM1GENA
                               EQU              PWM_BASE+0x0A0
   60 00000000 400280A4 
                       PWM1GENB
                               EQU              PWM_BASE+0x0A4
   61 00000000         
   62 00000000         
   63 00000000         
   64 00000000         
   65 00000000                 AREA             |.text|, CODE, READONLY
   66 00000000                 ENTRY
   67 00000000         
   68 00000000         ;; The EXPORT command specifies that a symbol can be acc
                       essed by other shared objects or executables.
   69 00000000                 EXPORT           MOTEUR_INIT
   70 00000000                 EXPORT           MOTEUR_DROIT_ON
   71 00000000                 EXPORT           MOTEUR_DROIT_OFF
   72 00000000                 EXPORT           MOTEUR_DROIT_AVANT
   73 00000000                 EXPORT           MOTEUR_DROIT_ARRIERE
   74 00000000                 EXPORT           MOTEUR_DROIT_INVERSE
   75 00000000                 EXPORT           MOTEUR_GAUCHE_ON
   76 00000000                 EXPORT           MOTEUR_GAUCHE_OFF
   77 00000000                 EXPORT           MOTEUR_GAUCHE_AVANT
   78 00000000                 EXPORT           MOTEUR_GAUCHE_ARRIERE
   79 00000000                 EXPORT           MOTEUR_GAUCHE_INVERSE
   80 00000000                 EXPORT           MOTEUR_SET_SPEED_R0
   81 00000000         
   82 00000000         MOTEUR_SET_SPEED_R0
   83 00000000         
   84 00000000         
   85 00000000 4E5B            ldr              r6, =PWM0CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
   86 00000002 6030            str              r0, [r6]
   87 00000004 4E5B            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 



ARM Macro Assembler    Page 4 


                                                            => 1C2h si clock = 
                                                            0F42400
   88 00000006 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x058)=0x01C2;
   89 00000008         
   90 00000008 4770            BX               LR
   91 0000000A         
   92 0000000A         
   93 0000000A         MOTEUR_INIT
   94 0000000A 4E5B            ldr              r6, = SYSCTL_RCGC0
   95 0000000C 6830            ldr              r0, [R6]
   96 0000000E F440 1080       ORR              r0, r0, #0x00100000 ;;bit 20 = 
                                                            PWM recoit clock: O
                                                            N (p271) 
   97 00000012 6030            str              r0, [r6]
   98 00000014         
   99 00000014         ;ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_1);PWM clock is pro
                       cessor clock /1
  100 00000014         ;Je ne fais rien car par defaut = OK!!
  101 00000014         ;*(int *) (0x400FE060)= *(int *)(0x400FE060)...;
  102 00000014         
  103 00000014         ;RCGC2 :  Enable port D GPIO(p291 ) car Moteur Droit sur
                        port D 
  104 00000014 4E59            ldr              r6, = SYSCTL_RCGC2
  105 00000016 6830            ldr              r0, [R6]
  106 00000018 F040 0008       ORR              r0, r0, #0x08 ;; Enable port D 
                                                            GPIO 
  107 0000001C 6030            str              r0, [r6]
  108 0000001E         
  109 0000001E         ;MOT2 : RCGC2 :  Enable port H GPIO  (2eme moteurs)
  110 0000001E 4E57            ldr              r6, = SYSCTL_RCGC2
  111 00000020 6830            ldr              r0, [R6]
  112 00000022 F040 0080       ORR              r0, r0, #0x80 ;; Enable port H 
                                                            GPIO 
  113 00000026 6030            str              r0, [r6]
  114 00000028         
  115 00000028 BF00            nop
  116 0000002A BF00            nop
  117 0000002C BF00            nop
  118 0000002E         
  119 0000002E         ;;Pin muxing pour PWM, port D, reg. GPIOPCTL(p444), 4bit
                       s de PCM0=0001<=>PWM (voir p1261)
  120 0000002E         ;;il faut mettre 1 pour avoir PD0=PWM0 et PD1=PWM1
  121 0000002E 4E54            ldr              r6, = GPIOPCTL_D
  122 00000030         ;ldr r0, [R6]   ;; *(int *)(0x40007000+0x0000052C)=1;
  123 00000030         ;ORR r0, r0, #0x01 ;; Port D, pin 1 = PWM 
  124 00000030 F04F 0001       mov              r0, #0x01
  125 00000034 6030            str              r0, [r6]
  126 00000036         
  127 00000036         ;;MOT2 : Pin muxing pour PWM, port H, reg. GPIOPCTL(p444
                       ), 4bits de PCM0=0001<=>PWM (voir p1261)
  128 00000036         ;;il faut mettre mux = 2 pour avoir PH0=PWM2 et PH1=PWM3
                       
  129 00000036 4E53            ldr              r6, = GPIOPCTL_H
  130 00000038 F04F 0002       mov              r0, #0x02
  131 0000003C 6030            str              r0, [r6]
  132 0000003E         
  133 0000003E         ;;Alternate Function Select (p 426), PD0 utilise alernat
                       e fonction (PWM au dessus)



ARM Macro Assembler    Page 5 


  134 0000003E         ;;donc PD0 = 1
  135 0000003E 4E52            ldr              r6, = GPIOAFSEL_D
  136 00000040 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  137 00000042 F040 0001       ORR              r0, r0, #0x01 ;
  138 00000046 6030            str              r0, [r6]
  139 00000048         
  140 00000048         ;;MOT2 : Alternate Function Select (p 426), PH0 utilise 
                       PWM donc Alternate funct
  141 00000048         ;;donc PH0 = 1
  142 00000048 4E50            ldr              r6, = GPIOAFSEL_H
  143 0000004A 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  144 0000004C F040 0001       ORR              r0, r0, #0x01 ;
  145 00000050 6030            str              r0, [r6]
  146 00000052         
  147 00000052         ;;-----------PWM0 pour moteur 1 connecté à PD0
  148 00000052         ;;PWM0 produit PWM0 et PWM1 output
  149 00000052         ;;Config Modes PWM0 + mode GenA + mode GenB
  150 00000052 4E4F            ldr              r6, = PWM0CTL
  151 00000054 F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  152 00000058 6030            str              r0, [r6]
  153 0000005A         
  154 0000005A 4E4E            ldr              r6, =PWM0GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  155 0000005C         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  156 0000005C F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  157 00000060 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  158 00000062         
  159 00000062 4E4D            ldr              r6, =PWM0GENB ;en comptage croi
                                                            ssant, qd comparate
                                                            urB = compteur => s
                                                            ortie pwmA=1
  160 00000064 F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  161 00000068 6030            str              r0, [r6]
  162 0000006A         ;Config Compteur, comparateur A et comparateur B
  163 0000006A         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  164 0000006A         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  165 0000006A         ;;on divise par 2 car moteur 6v sur alim 12v



ARM Macro Assembler    Page 6 


  166 0000006A 4E4C            ldr              r6, =PWM0LOAD ;PWM0LOAD=periode
                                                            /2 =0x1F4
  167 0000006C F44F 70FA       mov              r0, #0x1F4
  168 00000070 6030            str              r0,[r6]
  169 00000072         
  170 00000072         
  171 00000072         
  172 00000072         ;ldr r6, =PWM0CMPA ;Valeur rapport cyclique : pour 10% =
                       > 1C2h si clock = 0F42400
  173 00000072         ;mov r0, #SPEED  
  174 00000072         ;str r0, [r6]  
  175 00000072         
  176 00000072         
  177 00000072         
  178 00000072         
  179 00000072         
  180 00000072         
  181 00000072 4E4B            ldr              r6, =PWM0CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (rappo
                                                            rt cyclique depend 
                                                            de CMPA)
  182 00000074 F44F 70FA       mov              r0, #0x1F4
  183 00000078 6030            str              r0, [r6]
  184 0000007A         
  185 0000007A         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  186 0000007A 4E45            ldr              r6, =PWM0CTL
  187 0000007C 6830            ldr              r0, [r6]
  188 0000007E F040 0007       ORR              r0, r0, #0x07
  189 00000082 6030            str              r0, [r6]
  190 00000084         
  191 00000084         ;;-----------PWM2 pour moteur 2 connecté à PH0
  192 00000084         ;;PWM1block produit PWM2 et PWM3 output
  193 00000084         ;;Config Modes PWM2 + mode GenA + mode GenB
  194 00000084 4E47            ldr              r6, = PWM1CTL
  195 00000086 F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  196 0000008A 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x040)=2;
  197 0000008C         
  198 0000008C 4E46            ldr              r6, =PWM1GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  199 0000008E         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  200 0000008E F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  201 00000092 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  202 00000094         
  203 00000094         ;*(int *)(0x40028000+0x060)=0x0B0; //
  204 00000094 4E45            ldr              r6, =PWM1GENB ;*(int *)(0x40028
                                                            000+0x064)=0x0B00;



ARM Macro Assembler    Page 7 


  205 00000096 F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  206 0000009A 6030            str              r0, [r6]    ;en comptage croiss
                                                            ant, qd comparateur
                                                            B = compteur => sor
                                                            tie pwmA=1
  207 0000009C         ;Config Compteur, comparateur A et comparateur B
  208 0000009C         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  209 0000009C         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  210 0000009C         ;;on divise par 2 car moteur 6v sur alim 12v
  211 0000009C         ;*(int *)(0x40028000+0x050)=0x1F4; //PWM0LOAD=periode/2 
                       =0x1F4
  212 0000009C 4E44            ldr              r6, =PWM1LOAD
  213 0000009E F44F 70FA       mov              r0, #0x1F4
  214 000000A2 6030            str              r0,[r6]
  215 000000A4         
  216 000000A4         ;ldr r6, =PWM1CMPA ;Valeur rapport cyclique : pour 10% =
                       > 1C2h si clock = 0F42400
  217 000000A4         ;mov r0, #SPEED
  218 000000A4         ;str r0, [r6]  ;*(int *)(0x40028000+0x058)=0x01C2;
  219 000000A4         
  220 000000A4 4E43            ldr              r6, =PWM1CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (CMPA 
                                                            depend du rapport c
                                                            yclique)
  221 000000A6 F44F 70FA       mov              r0, #0x1F4  ; *(int *)(0x400280
                                                            00+0x05C)=0x1F4; 
  222 000000AA 6030            str              r0, [r6]
  223 000000AC         
  224 000000AC         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  225 000000AC 4E3D            ldr              r6, =PWM1CTL
  226 000000AE 6830            ldr              r0, [r6]    ;*(int *) (0x400280
                                                            00+0x40)= *(int *)(
                                                            0x40028000+0x40) | 
                                                            0x07;
  227 000000B0 F040 0007       ORR              r0, r0, #0x07
  228 000000B4 6030            str              r0, [r6]
  229 000000B6         
  230 000000B6         ;;-----Fin config des PWMs   
  231 000000B6         
  232 000000B6         ;PORT D OUTPUT pin0 (pwm)=pin1(direction)=pin2(slow deca
                       y)=pin5(12v enable)
  233 000000B6 4E40            ldr              r6, =GPIODIR_D
  234 000000B8 6830            ldr              r0, [r6]
  235 000000BA F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  236 000000BE 6030            str              r0,[r6]
  237 000000C0         ;Port D, 2mA les meme
  238 000000C0 4E3E            ldr              r6, =GPIODR2R_D ; 
  239 000000C2 6830            ldr              r0, [r6]
  240 000000C4 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  241 000000C8 6030            str              r0,[r6]
  242 000000CA         ;Port D, Digital Enable
  243 000000CA 4E3D            ldr              r6, =GPIODEN_D ;
  244 000000CC 6830            ldr              r0, [r6]



ARM Macro Assembler    Page 8 


  245 000000CE F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  246 000000D2 6030            str              r0,[r6]
  247 000000D4         ;Port D : mise à 1 de slow Decay et 12V et mise à 0 pour
                        dir et pwm
  248 000000D4 4E3B            ldr              r6, =(GPIODATA_D+((GPIO_0+GPIO_
1+GPIO_2+GPIO_5)<<2))
  249 000000D6 F04F 0024       mov              r0, #(GPIO_2+GPIO_5) ; #0x24
  250 000000DA 6030            str              r0,[r6]
  251 000000DC         
  252 000000DC         ;MOT2, PH1 pour sens moteur ouput
  253 000000DC 4E3A            ldr              r6, =GPIODIR_H
  254 000000DE F04F 0003       mov              r0, #0x03   ; 
  255 000000E2 6030            str              r0,[r6]
  256 000000E4         ;Port H, 2mA les meme
  257 000000E4 4E39            ldr              r6, =GPIODR2R_H
  258 000000E6 F04F 0003       mov              r0, #0x03
  259 000000EA 6030            str              r0,[r6]
  260 000000EC         ;Port H, Digital Enable
  261 000000EC 4E38            ldr              r6, =GPIODEN_H
  262 000000EE F04F 0003       mov              r0, #0x03
  263 000000F2 6030            str              r0,[r6]
  264 000000F4         ;Port H : mise à 1 pour dir 
  265 000000F4 4E37            ldr              r6, =(GPIODATA_H +(GPIO_1<<2))
  266 000000F6 F04F 0002       mov              r0, #0x02
  267 000000FA 6030            str              r0,[r6]
  268 000000FC         
  269 000000FC 4770            BX               LR          ; FIN du sous progr
                                                            amme d'init.
  270 000000FE         
  271 000000FE         
  272 000000FE         ;Enable PWM0 (bit 0) et PWM2 (bit 2) p1145 
  273 000000FE         ;Attention ici c'est les sorties PWM0 et PWM2
  274 000000FE         ;qu'on controle, pas les blocks PWM0 et PWM1!!!
  275 000000FE         
  276 000000FE         
  277 000000FE         MOTEUR_DROIT_ON
  278 000000FE         ;Enable sortie PWM0 (bit 0), p1145 
  279 000000FE 4E36            ldr              r6, =PWMENABLE
  280 00000100 6830            ldr              r0, [r6]
  281 00000102 F040 0001       orr              r0, #0x01   ;bit 0 à 1
  282 00000106 6030            str              r0, [r6]
  283 00000108 4770            BX               LR
  284 0000010A         
  285 0000010A         MOTEUR_DROIT_OFF
  286 0000010A 4E33            ldr              r6, =PWMENABLE
  287 0000010C 6830            ldr              r0, [r6]
  288 0000010E F000 000E       and              r0, #0x0E   ;bit 0 à 0
  289 00000112 6030            str              r0, [r6]
  290 00000114 4770            BX               LR
  291 00000116         
  292 00000116         MOTEUR_GAUCHE_ON
  293 00000116 4E30            ldr              r6, =PWMENABLE
  294 00000118 6830            ldr              r0, [r6]
  295 0000011A F040 0004       orr              r0, #0x04   ;bit 2 à 1
  296 0000011E 6030            str              r0, [r6]
  297 00000120 4770            BX               LR
  298 00000122         
  299 00000122         MOTEUR_GAUCHE_OFF



ARM Macro Assembler    Page 9 


  300 00000122 4E2D            ldr              r6, =PWMENABLE
  301 00000124 6830            ldr              r0, [r6]
  302 00000126 F000 000B       and              r0, #0x0B   ;bit 2 à 0
  303 0000012A 6030            str              r0, [r6]
  304 0000012C 4770            BX               LR
  305 0000012E         
  306 0000012E         MOTEUR_DROIT_ARRIERE
  307 0000012E         ;Inverse Direction (GPIO_D1)
  308 0000012E 4E2B            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  309 00000130 F04F 0000       mov              r0, #0
  310 00000134 6030            str              r0,[r6]
  311 00000136 4770            BX               LR
  312 00000138         
  313 00000138         MOTEUR_DROIT_AVANT
  314 00000138         ;Inverse Direction (GPIO_D1)
  315 00000138 4E28            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  316 0000013A F04F 0002       mov              r0, #2
  317 0000013E 6030            str              r0,[r6]
  318 00000140 4770            BX               LR
  319 00000142         
  320 00000142         MOTEUR_GAUCHE_ARRIERE
  321 00000142         ;Inverse Direction (GPIO_D1)
  322 00000142 4E24            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  323 00000144 F04F 0002       mov              r0, #2      ; contraire du mote
                                                            ur Droit
  324 00000148 6030            str              r0,[r6]
  325 0000014A 4770            BX               LR
  326 0000014C         
  327 0000014C         MOTEUR_GAUCHE_AVANT
  328 0000014C         ;Inverse Direction (GPIO_D1)
  329 0000014C 4E21            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  330 0000014E F04F 0000       mov              r0, #0
  331 00000152 6030            str              r0,[r6]
  332 00000154 4770            BX               LR
  333 00000156         
  334 00000156         MOTEUR_DROIT_INVERSE
  335 00000156         ;Inverse Direction (GPIO_D1)
  336 00000156 4E21            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  337 00000158 6831            ldr              r1, [r6]
  338 0000015A F081 0002       EOR              r0, r1, #GPIO_1
  339 0000015E 6030            str              r0,[r6]
  340 00000160 4770            BX               LR
  341 00000162         
  342 00000162         MOTEUR_GAUCHE_INVERSE
  343 00000162         ;Inverse Direction (GPIO_D1)
  344 00000162 4E1C            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  345 00000164 6831            ldr              r1, [r6]
  346 00000166 F081 0002       EOR              r0, r1, #GPIO_1
  347 0000016A 6030            str              r0,[r6]
  348 0000016C 4770            BX               LR
  349 0000016E         
  350 0000016E                 END
              00 00 40028058 
              40028098 
              400FE100 
              400FE108 
              4000752C 
              4002752C 
              40007420 



ARM Macro Assembler    Page 10 


              40027420 
              40028040 
              40028060 
              40028064 
              40028050 
              4002805C 
              40028080 
              400280A0 
              400280A4 
              40028090 
              4002809C 
              40007400 
              40007500 
              4000751C 
              4000709C 
              40027400 
              40027500 
              4002751C 
              40027008 
              40028008 
              40007008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\engines.d -o.\objects\engines.o -I.\RTE\_Target_1 -IC:\U
sers\vince\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\User
s\vince\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM3\Include --pre
define="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_V
ERSION SETA 532" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --prede
fine="_RTE_ SETA 1" --list=.\listings\engines.lst Engines.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 65 in file Engines.s
   Uses
      None
Comment: .text unused
MOTEUR_DROIT_ARRIERE 0000012E

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 306 in file Engines.s
   Uses
      At line 73 in file Engines.s
Comment: MOTEUR_DROIT_ARRIERE used once
MOTEUR_DROIT_AVANT 00000138

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 313 in file Engines.s
   Uses
      At line 72 in file Engines.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000156

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 334 in file Engines.s
   Uses
      At line 74 in file Engines.s
Comment: MOTEUR_DROIT_INVERSE used once
MOTEUR_DROIT_OFF 0000010A

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 285 in file Engines.s
   Uses
      At line 71 in file Engines.s
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 000000FE

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 277 in file Engines.s
   Uses
      At line 70 in file Engines.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000142

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 320 in file Engines.s
   Uses
      At line 78 in file Engines.s
Comment: MOTEUR_GAUCHE_ARRIERE used once
MOTEUR_GAUCHE_AVANT 0000014C

Symbol: MOTEUR_GAUCHE_AVANT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 327 in file Engines.s
   Uses
      At line 77 in file Engines.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000162

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 342 in file Engines.s
   Uses
      At line 79 in file Engines.s
Comment: MOTEUR_GAUCHE_INVERSE used once
MOTEUR_GAUCHE_OFF 00000122

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 299 in file Engines.s
   Uses
      At line 76 in file Engines.s
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 00000116

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 292 in file Engines.s
   Uses
      At line 75 in file Engines.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 0000000A

Symbol: MOTEUR_INIT
   Definitions
      At line 93 in file Engines.s
   Uses
      At line 69 in file Engines.s
Comment: MOTEUR_INIT used once
MOTEUR_SET_SPEED_R0 00000000

Symbol: MOTEUR_SET_SPEED_R0
   Definitions
      At line 82 in file Engines.s
   Uses
      At line 80 in file Engines.s
Comment: MOTEUR_SET_SPEED_R0 used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOAFSEL_D 40007420

Symbol: GPIOAFSEL_D
   Definitions
      At line 32 in file Engines.s
   Uses
      At line 135 in file Engines.s
Comment: GPIOAFSEL_D used once
GPIOAFSEL_H 40027420

Symbol: GPIOAFSEL_H
   Definitions
      At line 40 in file Engines.s
   Uses
      At line 142 in file Engines.s
Comment: GPIOAFSEL_H used once
GPIODATA_D 40007000

Symbol: GPIODATA_D
   Definitions
      At line 27 in file Engines.s
   Uses
      At line 248 in file Engines.s
      At line 308 in file Engines.s
      At line 315 in file Engines.s
      At line 336 in file Engines.s

GPIODATA_H 40027000

Symbol: GPIODATA_H
   Definitions
      At line 35 in file Engines.s
   Uses
      At line 265 in file Engines.s
      At line 322 in file Engines.s
      At line 329 in file Engines.s
      At line 344 in file Engines.s

GPIODEN_D 4000751C

Symbol: GPIODEN_D
   Definitions
      At line 30 in file Engines.s
   Uses
      At line 243 in file Engines.s
Comment: GPIODEN_D used once
GPIODEN_H 4002751C

Symbol: GPIODEN_H
   Definitions
      At line 38 in file Engines.s
   Uses
      At line 261 in file Engines.s
Comment: GPIODEN_H used once
GPIODIR_D 40007400

Symbol: GPIODIR_D
   Definitions
      At line 28 in file Engines.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 233 in file Engines.s
Comment: GPIODIR_D used once
GPIODIR_H 40027400

Symbol: GPIODIR_H
   Definitions
      At line 36 in file Engines.s
   Uses
      At line 253 in file Engines.s
Comment: GPIODIR_H used once
GPIODR2R_D 40007500

Symbol: GPIODR2R_D
   Definitions
      At line 29 in file Engines.s
   Uses
      At line 238 in file Engines.s
Comment: GPIODR2R_D used once
GPIODR2R_H 40027500

Symbol: GPIODR2R_H
   Definitions
      At line 37 in file Engines.s
   Uses
      At line 257 in file Engines.s
Comment: GPIODR2R_H used once
GPIOPCTL_D 4000752C

Symbol: GPIOPCTL_D
   Definitions
      At line 31 in file Engines.s
   Uses
      At line 121 in file Engines.s
Comment: GPIOPCTL_D used once
GPIOPCTL_H 4002752C

Symbol: GPIOPCTL_H
   Definitions
      At line 39 in file Engines.s
   Uses
      At line 129 in file Engines.s
Comment: GPIOPCTL_H used once
GPIO_0 00000001

Symbol: GPIO_0
   Definitions
      At line 16 in file Engines.s
   Uses
      At line 235 in file Engines.s
      At line 240 in file Engines.s
      At line 245 in file Engines.s
      At line 248 in file Engines.s

GPIO_1 00000002

Symbol: GPIO_1
   Definitions
      At line 17 in file Engines.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 235 in file Engines.s
      At line 240 in file Engines.s
      At line 245 in file Engines.s
      At line 248 in file Engines.s
      At line 265 in file Engines.s
      At line 308 in file Engines.s
      At line 315 in file Engines.s
      At line 322 in file Engines.s
      At line 329 in file Engines.s
      At line 336 in file Engines.s
      At line 338 in file Engines.s
      At line 344 in file Engines.s
      At line 346 in file Engines.s

GPIO_2 00000004

Symbol: GPIO_2
   Definitions
      At line 18 in file Engines.s
   Uses
      At line 235 in file Engines.s
      At line 240 in file Engines.s
      At line 245 in file Engines.s
      At line 248 in file Engines.s
      At line 249 in file Engines.s

GPIO_5 00000020

Symbol: GPIO_5
   Definitions
      At line 19 in file Engines.s
   Uses
      At line 235 in file Engines.s
      At line 240 in file Engines.s
      At line 245 in file Engines.s
      At line 248 in file Engines.s
      At line 249 in file Engines.s

PORTD_BASE 40007000

Symbol: PORTD_BASE
   Definitions
      At line 26 in file Engines.s
   Uses
      At line 27 in file Engines.s
      At line 28 in file Engines.s
      At line 29 in file Engines.s
      At line 30 in file Engines.s
      At line 31 in file Engines.s
      At line 32 in file Engines.s

PORTH_BASE 40027000

Symbol: PORTH_BASE
   Definitions
      At line 34 in file Engines.s
   Uses
      At line 35 in file Engines.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 36 in file Engines.s
      At line 37 in file Engines.s
      At line 38 in file Engines.s
      At line 39 in file Engines.s
      At line 40 in file Engines.s

PWM0CMPA 40028058

Symbol: PWM0CMPA
   Definitions
      At line 49 in file Engines.s
   Uses
      At line 85 in file Engines.s
Comment: PWM0CMPA used once
PWM0CMPB 4002805C

Symbol: PWM0CMPB
   Definitions
      At line 50 in file Engines.s
   Uses
      At line 181 in file Engines.s
Comment: PWM0CMPB used once
PWM0CTL 40028040

Symbol: PWM0CTL
   Definitions
      At line 47 in file Engines.s
   Uses
      At line 150 in file Engines.s
      At line 186 in file Engines.s

PWM0GENA 40028060

Symbol: PWM0GENA
   Definitions
      At line 51 in file Engines.s
   Uses
      At line 154 in file Engines.s
Comment: PWM0GENA used once
PWM0GENB 40028064

Symbol: PWM0GENB
   Definitions
      At line 52 in file Engines.s
   Uses
      At line 159 in file Engines.s
Comment: PWM0GENB used once
PWM0LOAD 40028050

Symbol: PWM0LOAD
   Definitions
      At line 48 in file Engines.s
   Uses
      At line 166 in file Engines.s
Comment: PWM0LOAD used once
PWM1CMPA 40028098

Symbol: PWM1CMPA
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 57 in file Engines.s
   Uses
      At line 87 in file Engines.s
Comment: PWM1CMPA used once
PWM1CMPB 4002809C

Symbol: PWM1CMPB
   Definitions
      At line 58 in file Engines.s
   Uses
      At line 220 in file Engines.s
Comment: PWM1CMPB used once
PWM1CTL 40028080

Symbol: PWM1CTL
   Definitions
      At line 55 in file Engines.s
   Uses
      At line 194 in file Engines.s
      At line 225 in file Engines.s

PWM1GENA 400280A0

Symbol: PWM1GENA
   Definitions
      At line 59 in file Engines.s
   Uses
      At line 198 in file Engines.s
Comment: PWM1GENA used once
PWM1GENB 400280A4

Symbol: PWM1GENB
   Definitions
      At line 60 in file Engines.s
   Uses
      At line 204 in file Engines.s
Comment: PWM1GENB used once
PWM1LOAD 40028090

Symbol: PWM1LOAD
   Definitions
      At line 56 in file Engines.s
   Uses
      At line 212 in file Engines.s
Comment: PWM1LOAD used once
PWMENABLE 40028008

Symbol: PWMENABLE
   Definitions
      At line 44 in file Engines.s
   Uses
      At line 279 in file Engines.s
      At line 286 in file Engines.s
      At line 293 in file Engines.s
      At line 300 in file Engines.s

PWM_BASE 40028000

Symbol: PWM_BASE



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 43 in file Engines.s
   Uses
      At line 44 in file Engines.s
      At line 47 in file Engines.s
      At line 48 in file Engines.s
      At line 49 in file Engines.s
      At line 50 in file Engines.s
      At line 51 in file Engines.s
      At line 52 in file Engines.s
      At line 55 in file Engines.s
      At line 56 in file Engines.s
      At line 57 in file Engines.s
      At line 58 in file Engines.s
      At line 59 in file Engines.s
      At line 60 in file Engines.s

SYSCTL_RCGC0 400FE100

Symbol: SYSCTL_RCGC0
   Definitions
      At line 22 in file Engines.s
   Uses
      At line 94 in file Engines.s
Comment: SYSCTL_RCGC0 used once
SYSCTL_RCGC2 400FE108

Symbol: SYSCTL_RCGC2
   Definitions
      At line 23 in file Engines.s
   Uses
      At line 104 in file Engines.s
      At line 110 in file Engines.s

34 symbols
384 symbols in table
